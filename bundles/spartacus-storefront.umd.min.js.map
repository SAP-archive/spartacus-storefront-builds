{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","Injectable","args","providedIn","NgbModal","CurrentProductService","routingService","productService","getProduct","_this","getRouterState","pipe","map","state","params","filter","Boolean","switchMap","productCode","get","RoutingService","ProductService","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","staticStyleClasses","undefined","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","AddedToCartDialogComponent","modalService","cartService","fb","iconTypes","ICON_TYPE","quantity","form","group","ngOnInit","entry$","tap","entry","code","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","dismissModal","removeEntry","item","updateEntry","_a","updatedQuantity","entryNumber","CartService","FormBuilder","ViewChild","static","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","increment","cartEntry$","getEntry","subscription","subscribe","stock","stockLevelStatus","stockLevel","maxQuantity","markForCheck","updateCount","addToCart","openModal","addEntry","unsubscribe","modalInstance","modalRef","centered","size","componentInstance","cart$","getActive","loaded$","getLoaded","ngOnDestroy","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","AutoFocusDirective","hostElement","ngAfterViewInit","focus","Directive","AutoFocusDirectiveModule","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getItemsPerSlide","itemWidth","resize$","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","Math","floor","CarouselComponent","el","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","console","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","target","event","getBreakpoint","innerWidth","distinctUntilChanged","of","windowWidth","getClosest","reverse","br","nativeWindow","LayoutConfig","MediaService","breakpointService","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","altText","mediaFormats","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","preventDefault","stopPropagation","onBlur","onFocus","setFocus","registerOnTouched","fn","registerOnChange","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","OnlyNumberDirective","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","hideOnSinglePage","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","showPagination","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","tslib_1.__values","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","take","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","cmsComponents","CMSSiteContextComponent","component","useClass","deps","SiteContextModule","entryComponents","StarRatingComponent","change","initialRate","setRate","rating","force","setAttribute","style","saveRate","StarRatingModule","FormUtils","isNotValidField","formControlName","submitted","invalid","touched","dirty","PromotionsComponent","PromotionsModule","CartItemListComponent","isReadOnly","hasHeader","potentialProductPromotions","forEach","getPotentialProductPromotionsForItem","entryPromotions","_c","_d","promotion","description","consumedEntries","_e","_f","consumedEntry","isConsumedByEntry","consumendEntryNumber","orderEntryNumber","entries","_b","CartItemComponent","compact","view","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","cart","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","appliedProductPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","go","cxRoute","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","combineLatest","slots","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","CartComponentModule","CartModule","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","checkout","steps","id","name","routeName","CheckoutStepType","CheckoutGuard","router","routingConfigService","parseUrl","getRouteConfig","paths","Router","CheckoutConfig","RoutingConfigService","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","AuthGuard","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","CheckoutConfigService","checkoutConfig","getCheckoutStep","currentStepType","getCheckoutStepIndex","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","snapshot","join","stepRoute","findIndex","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","cartId","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","ShippingAddressSetGuard","checkoutDetailsService","checkoutConfigService","checkoutStep","warn","deliveryAddress","keys","DeliveryModeComponent","mode","deliveryModeId","Validators","required","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","getSupportedDeliveryModes","deliveryModeSub","getSelectedDeliveryMode","deliveryMode","currentDeliveryModeId","changeMode","setDeliveryMode","back","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","userAddressService","selectedCountry$","BehaviorSubject","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","UserAddressService","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","userPaymentService","months","years","sameAsShippingAddress","goBack","closeForm","setPaymentDetails","payment","defaultPayment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","add","MSG_TYPE_ERROR","openSuggestedAddress","year","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","address","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","UserPaymentService","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","loadPaymentMethods","existingPaymentMethods$","getPaymentMethods","getPaymentDetailsSub","paymentInfo","field","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","title","img","getCardIcon","actions","header","paymentMethodSelected","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","UserService","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","userService","showCancelBtn","submitAddress","backToAddress","defaultAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","AddressFormModule","ShippingAddressComponent","newAddressFormManuallyOpened","cards","selectedAddress$","goTo","getAddressesLoading","existingAddresses$","getAddresses","cards$","asObservable","addresses","textDefaultShippingAddress","textShipToThisAddress","loadAddresses","setAddressSub","setAddress","goNext","selectedAddressSub","addressSelected","addAddress","newAddress","createAndSetAddress","setDeliveryAddress","addNewAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","outlet","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","layoutModules","LayoutModule","OutletDirective","vcr","_context","nodes","renderTemplate","cxOutlet","ref","createEmbeddedView","$implicit","rootNodes","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","split","path","script","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","DOCUMENT","PLATFORM_ID","CxApiService","auth","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","kyma","occEndpoints","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","ngZone","AuthService","CartDataService","CmsService","PageMetaService","FeatureConfigService","KymaService","OccEndpointsService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserConsentService","UserOrderService","NgZone","ComponentWrapperDirective","componentMapper","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","element","parentElement","P","reject","fulfilled","rejected","uid","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","DynamicAttributeService","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","a","addComponentClass","addClass","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","breakpoint$","resolveSlots","getSlotConfig","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","layoutSlots","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","cls","currentClass","removeClass","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","useFactory","APP_INITIALIZER","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","initSeoService","SeoModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","obj","wrapIntoObservable","first","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","componentRoutes","updateRouting","navigateByUrl","PageType","CONTENT_PAGE","newRoute","children","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","getNextPageContext","hasPage","withLatestFrom","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","hasNotFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","SemanticPathService","cmsRoute","addCmsRoute","ɵ0","CmsRouteModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","trim","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","select","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","authService","translationService","Subscription","userToken$","getUserToken","resetRemoveUserProcessState","getRemoveUserResultSuccess","success","onSuccess","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ConsentManagementFormComponent","consentChanged","consentGiven","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","onConsentChange","given","ConsentManagementComponent","userConsentService","subscriptions","loading$","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","getConsents","templateList","consentsExists","loadConsents","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","giveConsent","version","withdrawConsent","ConsentManagementModule","CustomFormValidators","emailDomainValidator","control","match","InvalidEmail","emailValidator","passwordValidator","InvalidPassword","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","moduleComponents","OrderDetailsModule","forChild","ɵ0$1","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","sort","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","password","repassword","validator","matchPassword","token","queryParams","isPasswordReset","reset","resetPassword","ac","NotEqual","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","isNotValid","onSubmit","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","logout","UpdateEmailModule","UpdatePasswordFormComponent","submitClicked","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","breadcrumbs","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","itemSuperType","itemId","processChildren","rootUid","loadNavigationItems","node","child","addLinkToNode","createChildren","itemType","linkName","getLink","categoryCode","transform","childNode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","query","minCharactersBeforeRequest","displayProducts","pageSize","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","contains","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","Pipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","OrderConfirmationTotalsComponent","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","source","price","images","PRIMARY","ProductCarouselComponent","productCodes","ProductCarouselModule","ProductReferencesComponent","current","currentProductCode$","productReferenceTypes","ProductReferencesModule","ProductIntroComponent","reviewsTabAvailable","product$","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","click","h3Elements","h3Element","innerHTML","ProductIntroModule","Grid","List","ProductViewComponent","modeChange","viewMode","toLowerCase","newMode","ViewModes","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_CATEGORY","RELEVANCE_BRAND","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","navigate","queryParamsHandling","relativeTo","ProductListComponent","productListComponentService","viewMode$","setViewMode","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","Map","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","slice","ProductGridItemComponent","ProductListItemComponent","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ProductReviewsComponent","reviewService","isWritingReview","initialMaxListItems","reviews$","getByProductCode","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","review","headline","comment","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","isActive","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","LoginFormComponent","authRedirectService","userId","login","emailToLowerCase","authorize","access_token","redirect","AuthRedirectService","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","ɵ0$2","LogoutModule","RegisterComponent","userRegistrationForm","passwordconf","newsletter","termsandconditions","requiredTrue","globalMessageEntities","submit","userRegisterFormData","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$3","ɵ1","ProductDetailsPageModule","matcher","ɵ0$4","ɵ1$1","pageLabel","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","forgotPassword","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","brand","termsAndConditions","defaultRoutingConfig","RoutingModule","forRoot","ngModule","provideConfig","CoreRoutingModule","StorefrontFoundationModule","StateModule","AuthModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","FeaturesConfigModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n\n  quantity = 0;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.hasStock = true;\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe(product => {\n          this.productCode = product.code;\n          this.quantity = 1;\n\n          if (\n            product.stock &&\n            product.stock.stockLevelStatus !== 'outOfStock' &&\n            product.stock.stockLevel > 0\n          ) {\n            this.maxQuantity = product.stock.stockLevel;\n            this.hasStock = true;\n          } else {\n            this.hasStock = false;\n          }\n\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, this.quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the itesm can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","export enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges, OnDestroy {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  @Input()\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.subscription = this.inputValue.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe(value => {\n        if (value) {\n          this.manualChange(Number(value));\n        }\n      });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    return e.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Input() hideOnSinglePage = false;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n\n  showPagination() {\n    return !(this.hideOnSinglePage && this.pagination.totalPages <= 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map(ctx => this.getInjectedService(ctx)),\n      filter(Boolean)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { FormGroup } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Checks is the `formControlName` field valid in the provided `form`.\n   *\n   * If it's NOT valid, the method returns `true`.\n   *\n   * @param form a form whose field to check\n   * @param formControlName a field name\n   * @param submitted is the form submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    return (\n      form.get(formControlName).invalid &&\n      (submitted ||\n        (form.get(formControlName).touched && form.get(formControlName).dirty))\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  items: Item[] = [];\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumendEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumendEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumendEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getActive().pipe(\n      map(cart => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable()\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Cart, OrderEntry, CartService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  UrlModule,\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartTotalsComponent } from './cart-totals.component';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\n\n@NgModule({\n  imports: [NgbModule, CartDetailsModule, CartTotalsModule, CartSharedModule],\n  exports: [\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n  ],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useClass: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    steps: Array<CheckoutStep>;\n  };\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutConfig } from './checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\n\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { Observable, of } from 'rxjs';\nimport { RoutingConfigService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.config.checkout.steps[0].routeName\n        ).paths[0]\n      )\n    );\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AuthGuard, CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [AuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute) {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  private getStepUrlFromActivatedRoute(activatedRoute: ActivatedRoute) {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string) {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutService,\n  PaymentDetails,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n  filter,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => cartData.code),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.SHIPPING_ADDRESS\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        map((deliveryMode: DeliveryMode) =>\n          deliveryMode && deliveryMode.code ? deliveryMode.code : null\n        )\n      )\n      .subscribe(code => {\n        if (!!code && code === this.currentDeliveryModeId) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    if (this.mode.touched) {\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [AuthGuard, CartNotEmptyGuard, ShippingAddressSetGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.DELIVERY_MODE\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return !!countries.filter(\n          (country: Country): boolean =>\n            country.isocode === address.country.isocode\n        ).length;\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.globalMessageService.add(\n                {\n                  key: 'paymentMethods.invalidField',\n                  params: { field: paymentInfo[key] },\n                },\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          const card: Card = {\n            title: payment.defaultPayment ? textDefaultPaymentMethod : '',\n            textBold: payment.accountHolderName,\n            text: [payment.cardNumber, textExpires],\n            img: this.getCardIcon(payment.cardType.code),\n            actions: [{ name: textUseThisPayment, event: 'send' }],\n          };\n          if (!this.selectedPayment && payment.defaultPayment) {\n            this.selectedPayment = payment;\n          }\n          if (this.selectedPayment && this.selectedPayment.id === payment.id) {\n            card.header = textSelected;\n          }\n          return card;\n        }\n      )\n    );\n  }\n\n  paymentMethodSelected(paymentDetails: PaymentDetails) {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  next(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.PAYMENT_DETAILS\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Observable, Subscription, BehaviorSubject } from 'rxjs';\nimport { map, tap, switchMap } from 'rxjs/operators';\n\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    this.checkoutDeliveryService.verifyAddress(this.address.value);\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/checkout-step.model';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  cards: Card[] = [];\n  isLoading$: Observable<boolean>;\n  selectedAddress: Address;\n  goTo: CheckoutStepType;\n  setAddress: Address;\n  setAddressSub: Subscription;\n  selectedAddressSub: Subscription;\n  selectedAddress$: BehaviorSubject<Address> = new BehaviorSubject<Address>(\n    null\n  );\n  cards$: Observable<CardWithAddress[]>;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$.asObservable(),\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (selected && Object.keys(selected).length > 0) {\n            this.selectedAddress = selected;\n          } else {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectedAddress = defaultAddress;\n          }\n\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    this.userAddressService.loadAddresses();\n\n    this.setAddressSub = this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .subscribe(address => {\n        this.setAddress = address;\n        this.selectedAddress$.next(address);\n        if (this.goTo) {\n          this.goNext();\n          this.goTo = null;\n        }\n      });\n    this.selectedAddressSub = this.selectedAddress$.subscribe(address => {\n      this.selectedAddress = address;\n    });\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n    const card: Card = {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n\n    this.cards.push(card);\n\n    return card;\n  }\n\n  addressSelected(address: Address): void {\n    this.selectedAddress$.next(address);\n  }\n\n  next(): void {\n    this.addAddress({ address: this.selectedAddress, newAddress: false });\n  }\n\n  addAddress({\n    newAddress,\n    address,\n  }: {\n    newAddress: boolean;\n    address: Address;\n  }): void {\n    if (newAddress) {\n      this.checkoutDeliveryService.createAndSetAddress(address);\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      return;\n    }\n    if (\n      this.setAddress &&\n      this.selectedAddress &&\n      this.setAddress.id === this.selectedAddress.id\n    ) {\n      this.goNext();\n    } else {\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      this.checkoutDeliveryService.setDeliveryAddress(address);\n    }\n  }\n\n  addNewAddress(address: Address): void {\n    this.addAddress({ address, newAddress: true });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goBack: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goBack) {\n      this.back();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = {};\n  private templatesRefsBefore = {};\n  private templatesRefsAfter = {};\n\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore[outlet] = template;\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs[outlet] = template;\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter[outlet] = template;\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore[outlet];\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter[outlet];\n        break;\n      default:\n        templateRef = this.templatesRefs[outlet];\n    }\n    return templateRef;\n    // return this.templatesRefs[outlet] ? this.templatesRefs[outlet] : null;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [...layoutModules],\n})\nexport class LayoutModule {}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: any;\n  @Input()\n  set cxOutletContext(value: any) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit(): void {\n    const nodes = [];\n    nodes.push(...this.renderTemplate(OutletPosition.BEFORE));\n    nodes.push(...this.renderTemplate(OutletPosition.REPLACE, true));\n    nodes.push(...this.renderTemplate(OutletPosition.AFTER));\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): any[] {\n    const nodes = [];\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template || replace) {\n      const ref = this.vcr.createEmbeddedView(template || this.templateRef, {\n        $implicit: this._context,\n      });\n      nodes.push(...ref.rootNodes);\n    }\n    return nodes;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      return config.slots;\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(Boolean));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injectable } from '@angular/core';\nimport { Title, Meta, MetaDefinition } from '@angular/platform-browser';\nimport { PageMetaService, PageMeta, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { SeoMetaService } from './seo-meta.service';\nimport { htmlLangProvider } from './html-lang-provider';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(pageContext: PageContext, routes: Route[]): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageContext.id.startsWith('/') &&\n      pageContext.id.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageContext.id.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: pageContext,\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\n\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  PageContext,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\n\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    private routingService: RoutingService,\n    private cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.hasPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([hasPage, pageContext]) =>\n        hasPage\n          ? this.resolveCmsPageLogic(pageContext, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageContext.id)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.hasPage(notFoundCmsPageContext).pipe(\n      switchMap(hasNotFoundPage => {\n        if (hasNotFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() => this.resolveCmsPageLogic(pageContext, route, state))\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport { Address, UserAddressService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(private userAddressService: UserAddressService) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Address, UserAddressService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(private userAddressService: UserAddressService) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ConsentTemplate } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  consentGiven = false;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consentTemplate && this.consentTemplate.currentConsent) {\n      if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n        this.consentGiven = false;\n      } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n        this.consentGiven = true;\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentChanged.emit({\n      given: !this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, skipWhile, tap, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n    ]).pipe(\n      map(\n        ([consentLoading, giveConsentLoading, withdrawConsentLoading]) =>\n          consentLoading || giveConsentLoading || withdrawConsentLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      tap(templateList => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      })\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(\n      // Email Standard RFC 5322:\n      /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ // tslint:disable-line\n    )\n      ? null\n      : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(\n      /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/\n    )\n      ? null\n      : { InvalidPassword: true };\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${\n              address.postalCode\n            }`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${\n              billingAddress.postalCode\n            }`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n    }),\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(Boolean),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    node.title = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node.children = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n\n      node.url = this.getLink(item);\n\n      // if \"NEWWINDOW\", target is true\n      node.target = item.target;\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  data$ = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n    GenericLinkModule,\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a singe product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${\n            deliveryAddress.postalCode\n          }`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${\n            billingAddress.postalCode\n          }`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes => codes.map(code => this.productService.get(code)))\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code)\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_CATEGORY = ':relevance:category:';\n  protected readonly RELEVANCE_BRAND = ':relevance:brand:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_CATEGORY + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_BRAND + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit {\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.productListComponentService.clearSearchResults();\n\n    this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n      this.viewMode$.next(\n        template === 'ProductGridPageTemplate' ? ViewModes.Grid : ViewModes.List\n      );\n    });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.productListComponentService.viewPage(pageNumber);\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(Boolean),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([_, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n  }\n\n  login(): void {\n    const userId = this.emailToLowerCase();\n    this.auth.authorize(userId, this.form.controls.password.value);\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  /*\n   * Change the inputed email to lowercase because\n   * the backend only accepts lowercase emails\n   */\n  emailToLowerCase() {\n    return this.form.controls.userId.value.toLowerCase();\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n\n  private subscription = new Subscription();\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: [false],\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private auth: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n\n    this.subscription.add(\n      this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      })\n    );\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(data => Object.keys(data).length > 0))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          if (\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR].some(\n              message => message === 'This field is required.'\n            )\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n  }\n\n  submit(): void {\n    this.emailToLowerCase();\n    const {\n      firstName,\n      lastName,\n      email,\n      password,\n      titleCode,\n    } = this.userRegistrationForm.value;\n    const userRegisterFormData: UserSignUp = {\n      firstName,\n      lastName,\n      uid: email,\n      password,\n      titleCode,\n    };\n    this.userService.register(userRegisterFormData);\n  }\n\n  private matchPassword(ac: AbstractControl): { NotEqual: boolean } {\n    if (ac.get('password').value !== ac.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n  }\n\n  /*\n   * Change the inputed email to lowercase because\n   * the backend only accepts lowercase emails\n   */\n  emailToLowerCase(): void {\n    this.userRegistrationForm.value.email = this.userRegistrationForm.value.email.toLowerCase();\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { UserComponentModule } from './user/user.module';\n\n@NgModule({\n  imports: [\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    // TODO:#2811 - uncomment to enable\n    // StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  UrlSegment,\n  UrlMatchResult,\n  Route,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName [ / ** ]'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'TopHeaderSlot',\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'] },\n  logout: { paths: ['logout'] },\n  register: { paths: ['login/register'] },\n  forgotPassword: { paths: ['login/forgot-password'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    ConfigModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    FeaturesConfigModule.forRoot(),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitely\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}