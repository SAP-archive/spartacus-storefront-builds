{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ICON_TYPE","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","ar","error","__spread","concat","IconResourceType","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","resources","type","LINK","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","SVG","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","WindowRef","IconConfig","Injectable","providedIn","IconComponent","iconLoader","elementRef","styleClasses","_type","addStyleClasses","undefined","staticStyleClasses","nativeElement","classList","ElementRef","Input","HostBinding","Component","selector","template","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","ModalRef","_super","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","requiredConsents","isLevel13","isFeatureLevel","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","_this","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","forEach","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","deferLoading","DeferLoadingStrategy","INSTANT","entryComponents","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","console","warn","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","renderer","Promise","resolve","split","path","script","setAttribute","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","args","DOCUMENT","PLATFORM_ID","CxApiService","auth","cart","cartData","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","Optional","CartService","CartDataService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","CmsService","PageMetaService","FeatureConfigService","GlobalMessageService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","RoutingService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","ComponentWrapperDirective","vcr","componentMapper","injector","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","get","CmsComponentData","element","parentElement","P","reject","fulfilled","rejected","result","then","uid","data$","getComponentData","configProviders","Injector","useValue","parent","addDynamicAttributes","properties","destroy","remove","ViewContainerRef","DynamicAttributeService","Renderer2","Directive","PageComponentModule","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","guards","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","state","canActivateObservables","map","guardClass","canActivate","isCanActivate","isObservable","obj","of","wrapIntoObservable","first","Error","skipWhile","endWith","BREAKPOINT","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","OutletPosition","LayoutConfig","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","event","getBreakpoint","innerWidth","xl","windowWidth","getClosest","reverse","br","nativeWindow","PAGE_LAYOUT_HANDLER","InjectionToken","PageLayoutService","breakpointService","handlers","warnLogMessages","logSlots","getSlots","section","page$","breakpoint$","page","pageTemplate","slots","resolveSlots","switchMap","_c","_d","handle","a","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","keys","filter","slot","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","isDevMode","info","join","cacheKey","PageLayoutComponent","el","pageLayoutService","section$","BehaviorSubject","templateName$","layoutName$","name","styleClass","slots$","pageFoldSlot$","templateName","cls","currentClass","removeClass","addClass","changeDetection","ChangeDetectionStrategy","OnPush","CmsRoutesService","router","cmsRouteExist","isCmsDrivenRoute","startsWith","routePath","substr","data","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","Router","CmsPageGuard","routingService","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","withLatestFrom","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","index","guardName","SemanticPathService","ProtectedRoutesGuard","SkipLinkScrollPosition","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","outlet","templateOrFactory","position","REPLACE","BEFORE","store","AFTER","stacked","templateRef","newValue","set","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","intersects","Observable","observer","rootMargin","getRootMargin","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","strategy","load","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletDirective","deferLoaderService","loaded","EventEmitter","subscription","initializeOutlet","clear","cxOutletDefer","render","ngOnChanges","changes","cxOutlet","emit","hostElement","getHostElement","renderOutlet","isArray","tmplOrFactory","ComponentFactory","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","Output","OutletModule","PageSlotComponent","isPending","hasComponents","isPageFold","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","SkipLinkService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","existing","getSkipLinkIndexInArray","i18nKey","scrollToTarget","parentNode","blur","inline","scrollIntoView","findIndex","previous","this_1","SkipLinkConfig","SkipLinkComponent","skipLinkService","observeOn","asyncScheduler","tabNext","isElement","nextSibling","focus","tabPrev","previousSibling","defaultSkipLinkConfig","SkipLinkDirective","elRef","cxSkipLink","SkipLinkModule","APP_INITIALIZER","useFactory","skipLinkFactory","deps","multi","PageSlotModule","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","globalMessageService","canPrompt","canPrompt$","asObservable","init","addEventListener","preventDefault","deferredEvent","enableAddToHomeScreen","GlobalMessageType","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","title","description","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","htmlLangProvider","setHtmlLangAttribute","languageService","getActive","lang","documentElement","JsonLdScriptFactory","rendererFactory","sanitizer","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","DomSanitizer","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","bypassSecurityTrustHtml","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","item","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","code","summary","images","PRIMARY","brand","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","stock","stockLevelStatus","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","rev","rating","reviewCount","comment","reviewSchema","principal","author","date","Date","datePublished","getFullYear","getMonth","getDate","headline","reviewRating","toString","CurrentProductService","productService","features","DEFAULT_PRODUCT_SCOPE","isLevel","ProductScope","DETAILS","getProduct","scopes","getRouterState","params","productCode","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","AsmComponentService","authService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","unload","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","disabled","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","encapsulation","ViewEncapsulation","None","AsmEnablerService","isUiAdded","isEnabled","addUi","isLaunched","isUsedBefore","setItem","getItem","Location","AsmLoaderModule","asmFactory","asmEnablerService","PaginationItemType","PaginationNavigationPosition","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","Math","floor","seconds","slice","Pipe","FormUtils","isNotValidField","form","formControlName","submitted","control","invalid","touched","dirty","CSAgentLoginFormComponent","fb","submitClicked","csAgentTokenLoading","submitEvent","group","Validators","required","onSubmit","controls","isNotValid","FormBuilder","CustomerEmulationComponent","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","valueChanges","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","query","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","AsmService","ViewChild","host","(document:click)","AsmModule","ReactiveFormsModule","AsmCoreModule","forRoot","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","PromotionService","cartService","orderDetailsService","checkoutService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","consumedEntries","e_2","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entryNumber","AddedToCartDialogComponent","promotionService","quantity","modalIsOpen","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","increment","addToCartForm","cartEntry$","getEntry","setStockInfo","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","getLoaded","AutoFocusDirective","ngAfterViewInit","AutoFocusDirectiveModule","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","delete","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","CarouselComponent","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","MediaService","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","getHighestAvailableFormat","mediaFormat_1","mediaFormats","altText","reduce","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","isInitialized","isLoading","isMissing","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","ItemCounterComponent","min","allowZero","readonly","handleClick","input","markAsDirty","decrement","getControl","_control$","getValidCount","emitEvent","max","HostListener","ItemCounterModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","defaultPaginationConfig","pagination","addStart","addEnd","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","number","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","round","minStart","maxStart","PaginationConfig","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","ActivatedRoute","PaginationModule","provideConfig","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","FormsModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","isQualtricsConfigured","initialize","setup","qualtricsScript","defer","idScript","qualtrics","projectId","qsi","isDataLoaded","dataLoaded","API","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","getInjectedService","nativeName","symbol","isocode","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","CMSSiteContextComponent","useClass","SiteContextModule","StarRatingComponent","change","initialRate","setRate","force","style","setProperty","saveRate","StarRatingModule","ViewConfigModule","ngModule","ViewConfigModule_1","view","ViewConfig","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","sortTitles","title1","title2","DeliveryModePreferences","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","sort","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getCustomerCoupons","customerCoupons","cartId","OCC_USER_ID_ANONYMOUS","guid","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponCode","submitDisabled$","valid","getAddVoucherResultLoading","btnEnabled","addVoucherIsLoading","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","filteredCoupons","applyVoucher","addVoucher","applyCustomerCoupon","filterValue","toLowerCase","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","potentialProductPromotions","resolveItems","createForm","disable","enable","isSaveForLaterEnabled","every","consignmentEntry","orderEntry","updateable","removeEntry","getPotentialProductPromotionsForItem","_e","_f","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","isUserLoggedIn","cartLoaded","sflLoaded","getAllPromotionsForCart","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","isEmpty","totalItems","CartPageLayoutHandler","getCart","selectiveCart","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","ActiveCartService","SaveForLaterModule","CartComponentModule","CartModule","CheckoutStepType","CheckoutConfig","AmendOrderType","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","year","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","msg","field","cardLabels","img","actions","header","goNext","goPrevious","paymentMethodSelected","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","ANONYMOUS_CONSENTS_FEATURE","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","tab","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","featureConfigService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","ValidateQuantity","q","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","getConsignmentProducts","products","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","returnCode","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","isPasswordReset","resetPassword","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","child","node","populateLink","itemType","linkName","getLink","categoryCode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","stopPropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","childNodes","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","avoidReopen","launchSearchResult","HighlightPipe","replace","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","active","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","thumbs","isThumbsEmpty","mainImage$","openImage","isActive","thumbnail","zoom","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","behavior","click","h3Elements","h3Element","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductDetailOutlets","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductFacetNavigationComponent","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","topValueCount","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","property","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","viewStore","prepareRouteUrl","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","markerIndex","selectStoreItemClickHandle","GoogleMapRendererService","static","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","onKey","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefillForm","login","authorize","markAsTouched","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","ɵ1$1","ProductDetailsPageModule","ɵ0$a","matcher","ɵ1$2","ɵ2","ɵ3","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","defaultStorefrontRoutesConfig","home","notFound","protected","forgotPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","termsAndConditions","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","couponClaim","defaultRoutingConfig","RoutingModule","RoutingModule_1","CoreRoutingModule","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","withConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.config, '1.3');\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n  UserNotificationPreferenceService,\n  UserInterestsService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map(breakpoint => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap(templateName =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.getPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","export abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, (T)[]>();\n  private templatesRefsBefore = new Map<string, (T)[]>();\n  private templatesRefsAfter = new Map<string, (T)[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  private store(store: Map<string, (T)[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned obervable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first(v => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable(observer => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin };\n      const intersectionObserver = new IntersectionObserver(entries => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options?: IntersectionOptions) {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evalutes whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>,\n    // tslint:disable-next-line: unified-signatures\n    intersectionService: DeferLoaderService\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(vcr: ViewContainerRef, templateRef: TemplateRef<any>, outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>, intersectionService?: IntersectionService) instead\n   */\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>\n  );\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService?: DeferLoaderService\n  ) {}\n\n  private initializeOutlet(): void {\n    this.vcr.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.render();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.initializeOutlet();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.render();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private render() {\n    this.renderOutlet(OutletPosition.BEFORE);\n    this.renderOutlet(OutletPosition.REPLACE);\n    this.renderOutlet(OutletPosition.AFTER);\n  }\n\n  private renderOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach(obj => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position is used to find the CMS page slot (and optional outlet)\n   * that is rendered in the PageSlotComponent. Furthermore, the position\n   * is added as a CSS class name to the host element.\n   */\n  @Input()\n  set position(position: string) {\n    this.position$.next(position);\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   *\n   * @deprecated we'll stop supporting this property in 2.0 as\n   * it is not used separately.\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe(components => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {\n  SkipLink,\n  SkipLinkConfig,\n  SkipLinkScrollPosition,\n} from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(protected config: SkipLinkConfig) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      skipLink => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target: target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key: key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      skipLink => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter(skipLink => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(\n    target: HTMLElement,\n    position: SkipLinkScrollPosition,\n    event: MouseEvent\n  ): void {\n    target = <HTMLElement>target.parentNode;\n    (<HTMLElement>event.target).blur();\n    const options: ScrollIntoViewOptions =\n      position === SkipLinkScrollPosition.AFTER ? { inline: 'end' } : {};\n\n    target.scrollIntoView(options);\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      skipLink => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          skipLink => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable, asyncScheduler } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\nimport { observeOn } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService\n    .getSkipLinks()\n    .pipe(observeOn(asyncScheduler)); // delay view's update to avoid ExpressionChangedAfterItHasBeenCheckedError\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink, event: MouseEvent): void {\n    this.skipLinkService.scrollToTarget(\n      skipLink.target,\n      skipLink.position,\n      event\n    );\n  }\n\n  /**\n   * Hides the skip link by removing the focus.\n   */\n  blur(event: MouseEvent): void {\n    (<HTMLElement>event.target).blur();\n  }\n\n  tabNext(event: MouseEvent): void {\n    if (this.isElement((<HTMLElement>event.target).nextSibling)) {\n      (<HTMLElement>(<HTMLElement>event.target).nextSibling).focus();\n    }\n  }\n  tabPrev(event: MouseEvent): void {\n    if (this.isElement((<HTMLElement>event.target).previousSibling)) {\n      (<HTMLElement>(<HTMLElement>event.target).previousSibling).focus();\n    }\n  }\n\n  private isElement(element: Node): boolean {\n    return !!element && element instanceof HTMLElement;\n  }\n}\n","import { SkipLinkConfig, SkipLinkScrollPosition } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'SiteContext',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'BottomHeaderSlot',\n      position: SkipLinkScrollPosition.AFTER,\n      i18nKey: 'skipLink.labels.main',\n    },\n    {\n      key: 'ProductLeftRefinements',\n      i18nKey: 'skipLink.labels.productFacets',\n    },\n    { key: 'ProductListSlot', i18nKey: 'skipLink.labels.productList' },\n    { key: 'Footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, Input, OnDestroy, OnInit, ElementRef } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input()\n  cxSkipLink: string;\n\n  constructor(\n    private elRef: ElementRef<HTMLElement>,\n    private skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkConfig } from './config/skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    { provide: SkipLinkConfig, useExisting: Config },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\nimport { SkipLinkModule } from '../../../layout/a11y/skip-link/skip-link.module';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule, SkipLinkModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  FeatureConfigService,\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    routingService: RoutingService,\n    productService: ProductService,\n    // tslint:disable-next-line: unified-signatures\n    features?: FeatureConfigService\n  );\n\n  /**\n   * @deprecated since 1.4\n   */\n  constructor(routingService: RoutingService, productService: ProductService);\n\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ProductScope.DETAILS : '';\n\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) =>\n        this.productService.get(\n          productCode,\n          // TODO deprecated since 1.4 - should be replaced with 'scopes || this.DEFAULT_PRODUCT_SCOPE'\n          this.features && this.features.isLevel('1.4')\n            ? scopes || this.DEFAULT_PRODUCT_SCOPE\n            : undefined\n          // deprecated END\n        )\n      )\n    );\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe(token => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap(userToken =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Location } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { OutletPosition, OutletService } from '../../../cms-structure/index';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\nimport { AsmMainUiComponent } from '../asm-main-ui/asm-main-ui.component';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  /** indicates whether the ASM UI has been added already */\n  private isUiAdded = false;\n\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletService: OutletService<ComponentFactory<any>>\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  private isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  private isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  private isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  private addUi(): void {\n    if (this.isUiAdded) {\n      return;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      AsmMainUiComponent\n    );\n    this.outletService.add('cx-storefront', factory, OutletPosition.BEFORE);\n    this.isUiAdded = true;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe(isNavigating => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(_ => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe(user => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: [''],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.form.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe(searchTermValue => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.form.controls.searchTerm.setValue(this.selectedCustomer.name);\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderEntry,\n  PromotionResult,\n  CartService,\n  Cart,\n  Order,\n  CheckoutService,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected cartService: CartService,\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.cartService\n      .getActive()\n      .pipe(map(cart => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map(order => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map(order => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.cartService\n          .getActive()\n          .pipe(\n            map(cart =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map(order =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map(order =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  CartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    modalService: ModalService,\n    cartService: CartService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(modalService: ModalService, cartService: CartService);\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected promotionService?: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter(e => !!e),\n        map(entry => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap(valueChange => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { CartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    cartService: CartService,\n    modalService: ModalService,\n    currentProductService: CurrentProductService,\n    cd: ChangeDetectorRef\n  );\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else if (media && media[this.getHighestAvailableFormat(media)]) {\n      return this.getImageUrl(media[this.getHighestAvailableFormat(media)].url);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * returns highest resolution format name from media formats\n   */\n  private getHighestAvailableFormat(media): string {\n    if (media) {\n      let mediaFormat: MediaFormats;\n\n      this.mediaFormats.forEach(format => {\n        if (\n          !mediaFormat ||\n          (mediaFormat.threshold < format.threshold && media[format.code])\n        ) {\n          mediaFormat = format;\n        }\n      });\n\n      return mediaFormat.code;\n    }\n\n    return null;\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap(value =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\n\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { Config, provideConfig } from '@spartacus/core';\nimport { defaultPaginationConfig, PaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [\n    provideConfig(defaultPaginationConfig),\n    { provide: PaginationConfig, useExisting: Config },\n  ],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(_ =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter(loaded => loaded),\n      switchMap(_ => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap(dataLoaded => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: `\n    <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container>\n  `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    ConfigModule.withConfig(defaultQualtricsConfig),\n  ],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthService,\n  Cart,\n  CartService,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  FeatureConfigService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  form: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  submitDisabled$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n  filteredCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    cartService: CartService,\n    authService: AuthService,\n    cartVoucherService: CartVoucherService,\n    formBuilder: FormBuilder,\n    customerCouponService: CustomerCouponService,\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add customerCouponService,featureConfig for customer coupon feature.\n   * Remove issue: #5971\n   */\n  constructor(\n    cartService: CartService,\n    authService: AuthService,\n    cartVoucherService: CartVoucherService,\n    formBuilder: FormBuilder\n  );\n\n  constructor(\n    private cartService: CartService,\n    private authService: AuthService,\n    private cartVoucherService: CartVoucherService,\n    private formBuilder: FormBuilder,\n    protected customerCouponService?: CustomerCouponService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n    if (this.featureConfig && this.featureConfig.isLevel('1.5')) {\n      this.cart$ = combineLatest([\n        this.cartService.getActive(),\n        this.authService.getOccUserId(),\n        this.customerCouponService.getCustomerCoupons(\n          this.MAX_CUSTOMER_COUPON_PAGE\n        ),\n      ]).pipe(\n        tap(\n          ([cart, userId, customerCoupons]: [\n            Cart,\n            string,\n            CustomerCouponSearchResult\n          ]) => {\n            this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code;\n            this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n          }\n        ),\n        map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n    else {\n      this.cart$ = combineLatest([\n        this.cartService.getActive(),\n        this.authService.getOccUserId(),\n      ]).pipe(\n        tap(\n          ([cart, userId]: [Cart, string]) =>\n            (this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n        ),\n        map(([cart]: [Cart, string]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n\n    this.cartIsLoading$ = this.cartService\n      .getLoaded()\n      .pipe(map(loaded => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.form = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.submitDisabled$ = combineLatest([\n      this.cartIsLoading$,\n      this.form.valueChanges.pipe(\n        startWith(true),\n        map(() => this.form.valid)\n      ),\n      this.cartVoucherService.getAddVoucherResultLoading(),\n    ]).pipe(\n      map(\n        ([cartIsLoading, btnEnabled, addVoucherIsLoading]) =>\n          cartIsLoading || !btnEnabled || addVoucherIsLoading\n      )\n    );\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe(success => {\n          this.onSuccess(success);\n        })\n    );\n\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe(error => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.form.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach(appliedVoucher => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          coupon => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n    this.filteredCoupons = this.applicableCoupons;\n  }\n\n  applyVoucher(): void {\n    this.cartVoucherService.addVoucher(this.form.value.couponCode, this.cartId);\n  }\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  filter(query: string): void {\n    const filterValue = query.toLowerCase();\n\n    this.filteredCoupons = this.applicableCoupons.filter(\n      coupon => coupon.couponId.toLowerCase().indexOf(filterValue) > -1\n    );\n  }\n\n  open(): void {\n    this.filteredCoupons = this.applicableCoupons;\n    if (this.applicableCoupons.length > 0) {\n      this.couponBoxIsActive = true;\n    }\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    FeaturesConfigModule,\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  CartService,\n  ConsignmentEntry,\n  FeatureConfigService,\n  PromotionLocation,\n  PromotionResult,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() potentialProductPromotions: PromotionResult[] = [];\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    cartService: CartService,\n    selectiveCartService: SelectiveCartService,\n    featureConfig: FeatureConfigService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Add selectiveCartService authService routingService and featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(cartService: CartService);\n\n  constructor(\n    protected cartService: CartService,\n    protected selectiveCartService?: SelectiveCartService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every(item => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map(consignmentEntry => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach(item => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.cartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map(value => {\n        if (value) {\n          this.cartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    //don't show promotions in saveforlater\n    if (this.options.isSaveForLater) {\n      return entryPromotions;\n    }\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n  FeatureConfigService,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() potentialProductPromotions: any[];\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    promotionService: PromotionService,\n    // tslint:disable-next-line:unified-signatures\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(promotionService: PromotionService);\n\n  constructor(\n    protected promotionService: PromotionService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  Cart,\n  CartService,\n  FeatureConfigService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    cartService: CartService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService,\n    selectiveCartService: SelectiveCartService,\n    authService: AuthService,\n    routingService: RoutingService,\n    featureConfig: FeatureConfigService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(cartService: CartService);\n\n  constructor(\n    protected cartService: CartService,\n    protected promotionService?: PromotionService,\n    protected selectiveCartService?: SelectiveCartService,\n    private authService?: AuthService,\n    private routingService?: RoutingService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n\n    /**\n     * TODO Remove the check for promotion service\n     * Issue: GH-5670\n     */\n    if (this.promotionService) {\n      this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n    }\n\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n\n    if (this.isSaveForLaterEnabled()) {\n      this.cartLoaded$ = combineLatest([\n        this.cartService.getLoaded(),\n        this.selectiveCartService.getLoaded(),\n        this.authService.isUserLoggedIn(),\n      ]).pipe(\n        tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n        map(([cartLoaded, sflLoaded, loggedIn]) =>\n          loggedIn ? cartLoaded && sflLoaded : cartLoaded\n        )\n      );\n    }\n    //TODO remove for #5958\n    else {\n      this.cartLoaded$ = this.cartService.getLoaded();\n    }\n    //TODO  remove for #5958 end\n    if (this.promotionService) {\n      this.orderPromotions$ = this.promotionService.getOrderPromotions(\n        this.promotionLocation\n      );\n    }\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958 end\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.cartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.cartService.getActive(),\n      this.cartService.getLoaded(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CartService,\n  SelectiveCartService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    cartService: CartService,\n    selectiveCartService: SelectiveCartService,\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add selectiveCartService and featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(cartService: CartService);\n\n  constructor(\n    private cartService: CartService,\n    private selectiveCartService?: SelectiveCartService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      if (this.featureConfig && this.featureConfig.isEnabled('saveForLater')) {\n        return combineLatest([\n          slots$,\n          this.cartService.getActive(),\n          this.selectiveCartService.getCart(),\n        ]).pipe(\n          map(([slots, cart, selectiveCart]) => {\n            if (cart.totalItems) {\n              return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n            } else if (selectiveCart.totalItems) {\n              return slots.filter(\n                slot =>\n                  slot !== 'EmptyCartMiddleContent' &&\n                  slot !== 'CenterRightContentSlot'\n              );\n            } else {\n              return slots.filter(\n                slot =>\n                  slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n              );\n            }\n          })\n        );\n      }\n      //TODO remove old code for #5958\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n      ////TODO remove old code for #5958\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter(product => Boolean(product)),\n    tap(product => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter(wishlist => Boolean(wishlist)),\n    map(wishList => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find(entry => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n    I18nModule,\n    IconModule,\n    RouterModule,\n    UrlModule,\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  SelectiveCartService,\n  Cart,\n  OrderEntry,\n  ActiveCartService,\n  CmsParagraphComponent,\n  CmsService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map(cart => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.getLoaded(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  FeaturesConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n    I18nModule,\n    CartSharedModule,\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  CartService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private cartService: CartService,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.cartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.cartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.cartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService,\n    checkoutConfigService: CheckoutConfigService,\n    expressCheckoutService: ExpressCheckoutService,\n    cartService: CartService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(router: Router,\n   *  config: CheckoutConfig - @deprecated since 2.x,\n   *  routingConfigService: RoutingConfigService,\n   *  checkoutConfigService: CheckoutConfigService,\n   *  expressCheckoutService: ExpressCheckoutService\n   *  cartService: CartService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService\n  );\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected expressCheckoutService?: ExpressCheckoutService,\n    protected cartService?: CartService\n  ) {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService) {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.checkoutConfigService.getFirstCheckoutStepRoute()\n          ).paths[0]\n        )\n      );\n    } else {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.config.checkout.steps[0].routeName\n          ).paths[0]\n        )\n      );\n    }\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.checkoutConfigService &&\n      this.expressCheckoutService &&\n      this.cartService\n    ) {\n      if (\n        this.checkoutConfigService.isExpressCheckout() &&\n        !this.cartService.isGuestCart()\n      ) {\n        return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n          switchMap((expressCheckoutPossible: boolean) => {\n            return expressCheckoutPossible\n              ? of(\n                  this.router.parseUrl(\n                    this.routingConfigService.getRouteConfig(\n                      this.checkoutConfigService.getCheckoutStepRoute(\n                        CheckoutStepType.REVIEW_ORDER\n                      )\n                    ).paths[0]\n                  )\n                )\n              : this.firstStep$;\n          })\n        );\n      }\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  LoaderState,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<LoaderState<void>>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService,\n    cartService: CartService // tslint:disable-line\n  );\n  /**\n   * @deprecated since 1.x\n   * NOTE: check issue:#1181 for more info\n   *\n   * TODO(issue:#1181) Deprecated since 1.x\n   */\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService\n  );\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected cartService?: CartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.cartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService, // tslint:disable-line\n    promotionService: PromotionService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected promotionService?: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepType } from '../..';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.cartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { AuthService, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private cartService: CartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.cartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\n@NgModule({\n  imports: [OutletRefModule],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach(comp => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach(key => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap(form => {\n        return this.getEntries().pipe(\n          map(entries =>\n            entries.filter(entry => this.getFormControl(form, entry).value > 0)\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap(order => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach(entry => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    if (this.isConfirmation) {\n      control.disable();\n    }\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach(entry =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter(order => Boolean(order)),\n      map(order =>\n        order.entries.filter(\n          entry => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter(entryNumber => <number>entries[entryNumber] > 0)\n      .map(\n        entryNumber =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map(form => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter(order => !!order.entries),\n      map(order =>\n        order.entries.filter(\n          entry => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter(entryNumber => <number>entries[entryNumber] > 0)\n      .map(\n        entryNumber =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first(r => !!r))\n      .subscribe(returnRequest => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map(form => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    orderDetailsService: OrderDetailsService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(orderDetailsService: OrderDetailsService);\n\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    protected promotionService?: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map(order => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(consignment =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map(order => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            consignment => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  /**\n   * @deprecated\n   * NOTE: This function will be removed in version 2.0\n   */\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map(order => order.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap(returnRequest => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      success => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map(returnRequests => returnRequests.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Observable, combineLatest, Subscription } from 'rxjs';\nimport {\n  CustomerCouponService,\n  CustomerCouponSearchResult,\n  PaginationModel,\n} from '@spartacus/core';\nimport { tap, map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          coupons =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe(error => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe(error => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe(k => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe(success => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  I18nModule,\n  ConfigModule,\n  CmsConfig,\n  AuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap(preferences => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach(p => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [\n    CommonModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          interests =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map(interest => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map(result => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n  AuthGuard,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                key => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                it => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map(items => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach(child =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map(child => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      _ =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    checkoutService: CheckoutService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(checkoutService: CheckoutService);\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService?: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  FeatureConfigService,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ProductScope.LIST : '';\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes =>\n      codes.map(code => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<model>,\n    productService: ProductService,\n    // tslint:disable-next-line: unified-signatures\n    features?: FeatureConfigService\n  );\n\n  /**\n   * @deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<model>,\n    productService: ProductService\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  /**\n   * @deprecated since version 1.5\n   * This variable will no longer be in use. Use thumbs$ observable instead.\n   * TODO(issue:#6166).\n   */\n  isThumbsEmpty: boolean;\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product)),\n    // TODO: deprecated, remove the below tap (issue:#6166)\n    tap(thumbs => {\n      this.isThumbsEmpty = thumbs.length === 0;\n    })\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet: Facet): Facet[] {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : facet.topValueCount\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter(product => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap(product => {\n        product.baseOptions.forEach(option => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find(item => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach(variant => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      item => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      item => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          item => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(\n                  filter(Boolean),\n                  take(1)\n                )\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter(variant => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  UrlModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  // TODO deprecated since 1.4, remove\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    map(p => p.code),\n    distinctUntilChanged(),\n    switchMap(productCode => this.reviewService.getByProductCode(productCode)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/components/star-rating/star-rating.module';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe(success => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(interests => !!interests.results && interests.results.length === 1)\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap(prefs => (this.enabledPrefs = prefs)),\n        map(prefs => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe(error => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe(success => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe(text =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    I18nModule,\n    SpinnerModule,\n    UrlModule,\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingService, StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AuthRedirectService, CartService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: CartService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.cartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.cartService.getAssignedUser().subscribe(_ => {\n        if (this.cartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService,\n    winRef: WindowRef, // tslint:disable-line,\n    activatedRoute: ActivatedRoute,\n    checkoutConfigService: CheckoutConfigService\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * Use constructor(\n   * auth: AuthService,\n   * globalMessageService: GlobalMessageService,\n   * fb: FormBuilder,\n   * authRedirectService: AuthRedirectService,\n   *  winRef: WindowRef,\n   * activatedRoute: ActivatedRoute,\n   * checkoutConfigService: CheckoutConfigService) instead\n   *\n   * TODO(issue:#4055) Deprecated since 1.1.0\n   */\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService\n  );\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef?: WindowRef,\n    private activatedRoute?: ActivatedRoute,\n    private checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n  ProtectedRoutesService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  /**\n   * @deprecated since 1.4\n   * Check #5666 for more info\n   *\n   * TODO(issue:5666) Deprecated since 1.4\n   */\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes?: ProtectedRoutesService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  protected redirect(): void {\n    // TODO(issue:5666) Deprecated since 1.4\n    const cxRoute: string =\n      this.featureConfig.isLevel('1.4') &&\n      this.protectedRoutes &&\n      this.protectedRoutes.shouldProtect\n        ? 'login'\n        : 'home';\n\n    this.routing.go({ cxRoute });\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template ? template.description : '',\n          };\n        })\n      );\n\n      this.subscription.add(\n        this.userRegistrationForm\n          .get('newsletter')\n          .valueChanges.subscribe(_ => {\n            this.toggleAnonymousConsent();\n          })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    if (Boolean(this.userRegistrationForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    } else {\n      this.anonymousConsentsService.withdrawConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n  MyCouponsModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  Route,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      md: {\n        pageFold: 'UpSelling',\n      },\n      xs: {\n        pageFold: 'Summary',\n      },\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('1.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}