{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-root/asm-root.component.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/assisted-service.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","Injectable","args","providedIn","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","undefined","staticStyleClasses","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","ICON_TYPE","requiredConsents","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","closeModal","rejectAll","_this","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","forEach","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","tslib_1.__values","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","anonymousConsentsFeature","ANONYMOUS_CONSENTS_FEATURE","templatesUpdated$","getTemplatesUpdated","updated","toggleBannerVisibility","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getItemsPerSlide","itemWidth","resize$","map","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","Math","floor","CarouselComponent","el","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","console","changeDetection","ChangeDetectionStrategy","OnPush","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","target","event","getBreakpoint","innerWidth","of","windowWidth","getClosest","reverse","br","nativeWindow","LayoutConfig","MediaService","breakpointService","code","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","altText","mediaFormats","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","subscription","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","increment","preventDefault","stopPropagation","onBlur","focus","onFocus","setFocus","registerOnTouched","fn","registerOnChange","updatedQuantity","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","ViewChild","static","OnlyNumberDirective","hostElement","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","Directive","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","hideOnSinglePage","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","showPagination","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","get","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","BehaviorSubject","isQualtricsConfigured","initialize","setup","qualtricsScript","defer","idScript","qualtrics","projectId","load","filter","switchMap","qsi","isDataLoaded","dataLoaded","API","unload","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","cmsComponents","component","entryComponents","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","item","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","CMSSiteContextComponent","useClass","deps","SiteContextModule","StarRatingComponent","change","initialRate","setRate","rating","force","setAttribute","style","saveRate","StarRatingModule","ViewConfigModule","forRoot","ngModule","provideConfig","view","ViewConfig","AutoFocusDirective","ngAfterViewInit","FormUtils","isNotValidField","form","formControlName","submitted","control","invalid","touched","dirty","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","FeaturesConfigModule","CurrentProductService","routingService","productService","getProduct","getRouterState","state","params","productCode","RoutingService","ProductService","AddedToCartDialogComponent","cartService","fb","quantity","group","entry$","entry","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","dismissModal","removeEntry","updateEntry","entryNumber","CartService","FormBuilder","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","cartEntry$","getEntry","setStockInfo","markForCheck","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","getLoaded","ChangeDetectorRef","AutoFocusDirectiveModule","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","isReadOnly","vouchers","slice","sort","a","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","cart","cartId","cartIsLoading$","resetAddVoucherProcessingState","couponCode","Validators","required","submitDisabled$","valid","getAddVoucherResultLoading","btnEnabled","addVoucherIsLoading","getAddVoucherResultSuccess","success","onSuccess","reset","applyVoucher","addVoucher","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","potentialProductPromotions","getPotentialProductPromotionsForItem","entryPromotions","_c","_d","promotion","description","consumedEntries","_e","e_2","_f","consumedEntry","isConsumedByEntry","consumendEntryNumber","orderEntryNumber","entries","CartItemComponent","compact","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","appliedProductPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","go","cxRoute","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","slots","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","CartComponentModule","CartModule","FREE","LEAST_EXPENSIVE","MOST_EXPENSIVE","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","checkout","steps","name","routeName","CheckoutStepType","express","defaultDeliveryMode","DeliveryModePreferences","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","leastExpensiveFound","deliveryMode","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","snapshot","join","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","CheckoutAuthGuard","authService","authRedirectService","checkoutConfigService","getUserToken","getAssignedUser","token","user","access_token","isGuestCart","forced","reportAuthGuard","AuthService","AuthRedirectService","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","uid","OCC_USER_ID_ANONYMOUS","guid","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","keys","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","warn","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","MSG_TYPE_ERROR","openSuggestedAddress","year","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","getCardIcon","msg","field","cardLabels","title","img","actions","header","goNext","goPrevious","paymentMethodSelected","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","UserService","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","userService","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","outlet","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","layoutModules","LayoutModule","OutletDirective","vcr","_context","nodes","renderTemplate","cxOutlet","ref","createEmbeddedView","$implicit","rootNodes","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","split","path","script","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","DOCUMENT","PLATFORM_ID","CxApiService","auth","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","kyma","occEndpoints","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","userAddress","userConsent","userOrder","userPayment","ngZone","CartDataService","CmsService","PageMetaService","FeatureConfigService","KymaService","OccEndpointsService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserConsentService","UserOrderService","NgZone","ComponentWrapperDirective","componentMapper","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","element","parentElement","P","reject","fulfilled","rejected","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","DynamicAttributeService","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","addComponentClass","addClass","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","breakpoint$","resolveSlots","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","layoutSlots","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","cls","currentClass","removeClass","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","useFactory","APP_INITIALIZER","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","rendererFactory","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","JSON","stringify","scriptElement","getElementById","createRenderer","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","sanitizer","writeJsonLd","html","jsonLD","bypassSecurityTrustHtml","DomSanitizer","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","isLevel13","isFeatureLevel","loading$","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","isUserLoggedIn","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","AsmMainUiComponent","asmService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","searchResultsLoading$","getCustomerSearchResultsLoading","customer$","handleCustomerSessionStartRedirection","isCustomerEmulationToken","loginCustomerSupportAgent","userId","password","authorizeCustomerSupporAgent","logoutCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","updateAsmUiState","visible","endSession","logout","AsmService","AsmRootComponent","asmUi$","getAsmUiState","queryParamMap","queryParams","showUi","CSAgentLoginFormComponent","submitClicked","csAgentTokenLoading","submitEvent","onSubmit","isNotValid","CustomerSelectionComponent","searchTerm","customerSearchReset","getCustomerSearchResults","handleSearchResults","customerHit","toLowerCase","customerSearch","query","AssistedServiceModule","AsmComponent","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","first","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","SemanticPathService","ProtectedRoutesGuard","cmsRoute","addCmsRoute","ɵ0","CmsRouteModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","brand","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","trim","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","select","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","featureConfigService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","isLevel","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","onError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentStatus","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","moduleComponents","ɵ1","OrderDetailsModule","forChild","ɵ0$1","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","features","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","isPasswordReset","resetPassword","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","itemSuperType","itemId","processChildren","rootUid","loadNavigationItems","node","child","addLinkToNode","createChildren","itemType","linkName","getLink","categoryCode","transform","childNode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","minCharactersBeforeRequest","displayProducts","pageSize","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","contains","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","Pipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","submit","registerGuest","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","source","ProductCarouselComponent","productCodes","ProductCarouselModule","ProductReferencesComponent","current","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","ProductIntroComponent","reviewsTabAvailable","product$","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","click","h3Elements","h3Element","ProductIntroModule","Grid","List","ProductViewComponent","modeChange","viewMode","newMode","ViewModes","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_CATEGORY","RELEVANCE_BRAND","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","infiniteScroll","active","setViewMode","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","Map","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","ProductGridItemComponent","ProductListItemComponent","defaultScrollConfig","productLimit","showMoreButton","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","thumbs","isThumbsEmpty","mainImage$","openImage","isActive","thumbnail","zoom","GALLERY","ProductImagesModule","ScheduleComponent","storeDataService","displayDays","changes","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","viewStore","prepareRouteUrl","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","markerIndex","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","totalResults","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","onKey","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","store","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","routeState","history","prefillForm","login","authorize","markAsTouched","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","hasPage","ɵ0$2","LogoutModule","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","isEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$3","ɵ1$1","ProductDetailsPageModule","matcher","ɵ0$4","ɵ1$2","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","protected","forgotPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","AsmModule","StateModule","AuthModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                consent.consentState == null ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent\n  implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  anonymousConsentsFeature = ANONYMOUS_CONSENTS_FEATURE;\n  bannerVisible$: Observable<boolean>;\n  templatesUpdated$: Observable<boolean>;\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  ngOnInit(): void {\n    this.templatesUpdated$ = this.anonymousConsentsService\n      .getTemplatesUpdated()\n      .pipe(\n        tap(updated => {\n          if (updated) {\n            this.anonymousConsentsService.toggleBannerVisibility(true);\n          }\n        })\n      );\n    this.bannerVisible$ = this.anonymousConsentsService.isBannerVisible();\n  }\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerVisibility(false);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","export enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges, OnDestroy {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  @Input()\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.subscription = this.inputValue.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe(value => {\n        if (value) {\n          this.manualChange(Number(value));\n        }\n      });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    return e.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Input() hideOnSinglePage = false;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n\n  showPagination() {\n    return !(this.hideOnSinglePage && this.pagination.totalPages <= 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(_ =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter(loaded => loaded),\n      switchMap(_ => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap(dataLoaded => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: `\n    <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container>\n  `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    ConfigModule.withConfig(defaultQualtricsConfig),\n  ],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n\n  quantity = 0;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  constructor(\n    cartService: CartService,\n    modalService: ModalService,\n    currentProductService: CurrentProductService,\n    cd: ChangeDetectorRef\n  );\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      // force hasStock and quanity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, this.quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Cart, CartService, CartVoucherService } from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  submitDisabled$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n\n  private subscription = new Subscription();\n\n  constructor(\n    private cartService: CartService,\n    private cartVoucherService: CartVoucherService,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService\n      .getActive()\n      .pipe(tap(cart => (this.cartId = cart.code)));\n\n    this.cartIsLoading$ = this.cartService\n      .getLoaded()\n      .pipe(map(loaded => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.form = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.submitDisabled$ = combineLatest([\n      this.cartIsLoading$,\n      this.form.valueChanges.pipe(\n        startWith(true),\n        map(() => this.form.valid)\n      ),\n      this.cartVoucherService.getAddVoucherResultLoading(),\n    ]).pipe(\n      map(\n        ([cartIsLoading, btnEnabled, addVoucherIsLoading]) =>\n          cartIsLoading || !btnEnabled || addVoucherIsLoading\n      )\n    );\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe(success => {\n          this.onSuccess(success);\n        })\n    );\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.form.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  applyVoucher(): void {\n    this.cartVoucherService.addVoucher(this.form.value.couponCode, this.cartId);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  items: Item[] = [];\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumendEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumendEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumendEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getActive().pipe(\n      map(cart => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable()\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\n\n@NgModule({\n  imports: [NgbModule, CartDetailsModule, CartTotalsModule, CartSharedModule],\n  exports: [\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useClass: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  CartService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private cartService: CartService,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.cartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.cartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.cartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService,\n    checkoutConfigService: CheckoutConfigService,\n    expressCheckoutService: ExpressCheckoutService,\n    cartService: CartService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(router: Router,\n   *  config: CheckoutConfig - @deprecated since 2.x,\n   *  routingConfigService: RoutingConfigService,\n   *  checkoutConfigService: CheckoutConfigService,\n   *  expressCheckoutService: ExpressCheckoutService\n   *  cartService: CartService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService\n  );\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected expressCheckoutService?: ExpressCheckoutService,\n    protected cartService?: CartService\n  ) {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService) {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.checkoutConfigService.getFirstCheckoutStepRoute()\n          ).paths[0]\n        )\n      );\n    } else {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.config.checkout.steps[0].routeName\n          ).paths[0]\n        )\n      );\n    }\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.checkoutConfigService &&\n      this.expressCheckoutService &&\n      this.cartService\n    ) {\n      if (\n        this.checkoutConfigService.isExpressCheckout() &&\n        !this.cartService.isGuestCart()\n      ) {\n        return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n          switchMap((expressCheckoutPossible: boolean) => {\n            return expressCheckoutPossible\n              ? of(\n                  this.router.parseUrl(\n                    this.routingConfigService.getRouteConfig(\n                      this.checkoutConfigService.getCheckoutStepRoute(\n                        CheckoutStepType.REVIEW_ORDER\n                      )\n                    ).paths[0]\n                  )\n                )\n              : this.firstStep$;\n          })\n        );\n      }\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n  CartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService,\n    cartService: CartService // tslint:disable-line\n  );\n  /**\n   * @deprecated since 1.x\n   * NOTE: check issue:#1181 for more info\n   *\n   * TODO(issue:#1181) Deprecated since 1.x\n   */\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService\n  );\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected cartService?: CartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.cartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/index';\nimport { CheckoutStepType } from '../../model/index';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const sortedTitles = titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...sortedTitles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepType } from '../..';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.cartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { AuthService, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private cartService: CartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.cartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = {};\n  private templatesRefsBefore = {};\n  private templatesRefsAfter = {};\n\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore[outlet] = template;\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs[outlet] = template;\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter[outlet] = template;\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore[outlet];\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter[outlet];\n        break;\n      default:\n        templateRef = this.templatesRefs[outlet];\n    }\n    return templateRef;\n    // return this.templatesRefs[outlet] ? this.templatesRefs[outlet] : null;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [...layoutModules],\n})\nexport class LayoutModule {}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: any;\n  @Input()\n  set cxOutletContext(value: any) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit(): void {\n    const nodes = [];\n    nodes.push(...this.renderTemplate(OutletPosition.BEFORE));\n    nodes.push(...this.renderTemplate(OutletPosition.REPLACE, true));\n    nodes.push(...this.renderTemplate(OutletPosition.AFTER));\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): any[] {\n    const nodes = [];\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template || replace) {\n      const ref = this.vcr.createEmbeddedView(template || this.templateRef, {\n        $implicit: this._context,\n      });\n      nodes.push(...ref.rootNodes);\n    }\n    return nodes;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = JSON.stringify(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const html = `<script type=\"application/ld+json\">${JSON.stringify(\n        schema\n      )}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.isConsentGiven(template)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isConsentGiven(consentTemplate: ConsentTemplate): boolean {\n    return (\n      Boolean(consentTemplate.currentConsent) &&\n      Boolean(consentTemplate.currentConsent.consentGivenDate) &&\n      !Boolean(consentTemplate.currentConsent.consentWithdrawnDate)\n    );\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.isConsentWithdrawn(template)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isConsentWithdrawn(consentTemplate: ConsentTemplate): boolean {\n    if (Boolean(consentTemplate.currentConsent)) {\n      return Boolean(consentTemplate.currentConsent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/index';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, ConsentManagementModule],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AsmService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n  searchResultsLoading$: Observable<boolean>;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected asmService: AsmService,\n    protected globalMessageService: GlobalMessageService,\n    protected routing: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.authService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.authService.getCustomerSupportAgentTokenLoading();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.authService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routing.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.authService.authorizeCustomerSupporAgent(userId, password);\n  }\n\n  logoutCustomerSupportAgent(): void {\n    this.authService.logoutCustomerSupportAgent();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.authService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.authService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.asmService.updateAsmUiState({ visible: false });\n  }\n\n  endSession() {\n    this.authService.logout();\n    this.routing.go({ cxRoute: 'home' });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AsmService, AsmUi } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-asm',\n  templateUrl: './asm-root.component.html',\n})\nexport class AsmRootComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  asmUi$: Observable<AsmUi>;\n\n  constructor(\n    protected asmService: AsmService,\n    protected activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.asmUi$ = this.asmService.getAsmUiState();\n\n    this.subscription.add(\n      this.activatedRoute.queryParamMap.subscribe(queryParams => {\n        if (queryParams.get('asm') === 'true') {\n          this.showUi();\n        }\n      })\n    );\n  }\n\n  private showUi(): void {\n    this.asmService.updateAsmUiState({ visible: true });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, OnInit, Output, Input } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmService,\n  CustomerSearchPage,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private submitClicked = false;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: ['', [Validators.required]],\n    });\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.asmService.customerSearchReset();\n    this.subscription.add(\n      this.asmService.getCustomerSearchResults().subscribe(results => {\n        this.handleSearchResults(results);\n      })\n    );\n  }\n\n  private handleSearchResults(results: CustomerSearchPage): void {\n    if (!!results && results.entries) {\n      const customerHit = results.entries.find(\n        element =>\n          element.uid.toLowerCase() ===\n          this.form.controls.searchTerm.value.toLowerCase()\n      );\n      if (customerHit) {\n        this.submitEvent.emit({ customerId: customerHit.customerId });\n      } else {\n        this.globalMessageService.add(\n          {\n            key: 'asm.customerSearch.noMatch',\n            params: { uid: this.form.controls.searchTerm.value },\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      }\n    }\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n    this.asmService.customerSearch({\n      query: this.form.controls.searchTerm.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmRootComponent } from './asm-root/asm-root.component';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AsmComponent: {\n          component: AsmRootComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmRootComponent,\n  ],\n  exports: [AsmRootComponent],\n  entryComponents: [AsmRootComponent],\n})\nexport class AssistedServiceModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.getPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    RouterModule.forChild([\n      {\n        path: 'guest/order/:orderCode',\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    node.title = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node.children = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n\n      node.url = this.getLink(item);\n\n      // if \"NEWWINDOW\", target is true\n      node.target = item.target;\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      _ =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    I18nModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes => codes.map(code => this.productService.get(code)))\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_CATEGORY = ':relevance:category:';\n  protected readonly RELEVANCE_BRAND = ':relevance:brand:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_CATEGORY + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_BRAND + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\nimport { ViewConfig } from '../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  viewPage(pageNumber: number): void {\n    this.productListComponentService.viewPage(pageNumber);\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  isThumbsEmpty: boolean;\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product)),\n    tap(thumbs => {\n      this.isThumbsEmpty = thumbs.length === 0;\n    })\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingService, StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap', { static: false })\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AuthRedirectService, CartService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: CartService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.cartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.cartService.getAssignedUser().subscribe(_ => {\n        if (this.cartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService,\n    winRef: WindowRef, // tslint:disable-line,\n    activatedRoute: ActivatedRoute,\n    checkoutConfigService: CheckoutConfigService\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * Use constructor(\n   * auth: AuthService,\n   * globalMessageService: GlobalMessageService,\n   * fb: FormBuilder,\n   * authRedirectService: AuthRedirectService,\n   *  winRef: WindowRef,\n   * activatedRoute: ActivatedRoute,\n   * checkoutConfigService: CheckoutConfigService) instead\n   *\n   * TODO(issue:#4055) Deprecated since 1.1.0\n   */\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService\n  );\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef?: WindowRef,\n    private activatedRoute?: ActivatedRoute,\n    private checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const sortedTitles = titles.sort(sortTitles);\n        return sortedTitles;\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template.description,\n          };\n        })\n      );\n\n      this.subscription.add(\n        this.userRegistrationForm\n          .get('newsletter')\n          .valueChanges.subscribe(_ => {\n            this.toggleAnonymousConsent();\n          })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    if (Boolean(this.userRegistrationForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    } else {\n      this.anonymousConsentsService.withdrawConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AssistedServiceModule } from './asm/assisted-service.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AssistedServiceModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  Route,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AsmModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    AsmModule.forRoot(),\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('1.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}