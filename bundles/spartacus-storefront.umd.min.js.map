{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-launch-dialog.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/default-anonymous-consent-layout.config.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/media/media.config.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-structure/services/cms-components.service.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cms-injector.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/component-handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/component-handler.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/default-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/web-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/lazy-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/asm-toggle-ui/asm-toggle-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/default-asm-layout.config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/product-facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/default-media.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","DIALOG_TYPE","LAUNCH_CALLER","BREAKPOINT","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","OutletPosition","LayoutConfig","Injectable","providedIn","useExisting","Config","LaunchRenderStrategy","document","rendererFactory","renderedCallers","dialogClasses","popoverClasses","sidebarEndClasses","sidebarStartClasses","renderer","createRenderer","shouldRender","caller","config","Boolean","component","some","el","multi","applyClasses","dialogType","classes","DIALOG","addClass","body","POPOVER","SIDEBAR_END","SIDEBAR_START","classes_1","classes_1_1","newClass","location","nativeElement","remove","filter","_a","removeClass","getPriority","Inject","DOCUMENT","InlineRenderStrategy","componentFactoryResolver","_this","_super","render","vcr","template","resolveComponentFactory","createComponent","element","of","isDevMode","console","warn","hasMatch","inline","args","RendererFactory2","ComponentFactoryResolver","LaunchDialogService","renderStrategies","layoutConfig","_dialogClose","BehaviorSubject","undefined","launch","findConfiguration","getStrategy","clear","asObservable","closeDialog","reason","resolveApplicable","ICON_TYPE","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","add","outlet","templateOrFactory","position","REPLACE","BEFORE","store","AFTER","get","stacked","templateRef","removeValueOrAll","newValue","set","has","delete","existing","val","OutletRefDirective","tpl","outletService","ngOnInit","cxOutletRef","cxOutletPos","TemplateRef","Input","Directive","selector","OutletRefModule","NgModule","imports","CommonModule","declarations","exports","OutletRendererService","outletRefs","size","register","cxOutlet","context","getOutletRef","pipe","map","IntersectionService","isIntersected","options","intersects","first","v","Observable","observer","intersectOptions","rootMargin","getRootMargin","threshold","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","distinctUntilChanged","deferredLoading","intersectionMargin","DeferLoaderService","platformId","intersectionService","globalLoadStrategy","strategy","DeferLoadingStrategy","INSTANT","load","shouldLoadInstantly","deferLoading","elementLoadingStrategy","isPlatformServer","DEFER","type","PLATFORM_ID","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","renderedComponents","loaded","EventEmitter","subscription","Subscription","unsubscribe","cxOutletDefer","build","ngOnChanges","changes","emit","hostElement","getHostElement","subscribe","buildOutlet","templates","includes","isArray","components","forEach","obj","tmplOrFactory","ComponentFactory","view","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","parentNode","ngOnDestroy","ViewContainerRef","Output","OutletModule","providers","OutletRenderStrategy","template_1","outletDirective","reverse","find","componentType","tap","RoutingRenderStrategy","routingService","_caller","go","cxRoute","RoutingService","LaunchDialogModule","forRoot","ngModule","LaunchDialogModule_1","provide","AnonymousConsentLaunchDialogService","launchDialogService","openDialog","openElement","ANONYMOUS_CONSENT","combineLatest","dialogClose","close","comp","focus","destroy","BaseFocusService","BaseFocusDirective","elementRef","service","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","indexOf","host","tagName","toLowerCase","hasAttribute","ElementRef","HostBinding","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","HostListener","BlockFocusDirective","block","PersistFocusService","group","getPersistenceGroup","getAttribute","PersistFocusDirective","handleFocus","event","preventDefault","stopPropagation","attr","ngAfterViewInit","isPersisted","preventScroll","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","from","querySelectorAll","findFirstFocusable","autofocus","isHidden","findFocusable","locked","invisible","suffix","join","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","focusOnDoubleEscape","EscapeFocusDirective","esc","AutoFocusService","hasPersistedFocus","getPersisted","focussed","AutoFocusDirective","shouldAutofocus","firstFocusable","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","active","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusService","hasFocusableChildren","moveFocus","focusable","getTrapStart","trap","getTrapEnd","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusService","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","handleClick","isLocked","lockFocus","addTabindexToChildren","setTimeout","_b","setAttribute","shouldUnlockAfterAutofocus","toString","Renderer2","KeyboardFocusService","FocusDirective","directives","KeyboardFocusModule","AnonymousConsentManagementBannerComponent","anonymousConsentsService","anonymousConsentLaunchDialogService","subscriptions","bannerVisible$","isBannerVisible","viewDetails","hideBanner","dialog","allowAll","giveAllConsents","toggleBannerDismissed","AnonymousConsentsService","Component","IconResourceType","IconConfig","PaginationItemType","PaginationNavigationPosition","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","FILTER","resources","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","res","types","svgResource","addLinkResource","resource","findResource","head","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","DomSanitizer","IconComponent","iconLoader","setIcon","addStyleClasses","styleClasses","cls","split","IconModule","provideDefaultConfig","AnonymousConsentDialogComponent","role","modal","showLegalDescription","iconTypes","requiredConsents","focusConfig","anonymousConsents","showLegalDescriptionInDialog","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","rejectAll","take","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","AnonymousConsentsConfig","defaultAnonymousConsentLayoutConfig","AnonymousConsentOpenDialogComponent","ViewChild","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","provideConfig","cmsComponents","entryComponents","SpinnerComponent","SpinnerModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","globalMessageService","anonymousConsentsConfig","authService","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","isUserLoggedIn","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","withLatestFrom","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","success","onConsentGivenSuccess","resetWithdrawConsentProcessState","skipWhile","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","code","GlobalMessageType","MSG_TYPE_CONFIRMATION","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","loading","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","UserConsentService","GlobalMessageService","AuthService","ConsentManagementModule","FormsModule","ReactiveFormsModule","guards","AuthGuard","AnonymousConsentsDialogModule","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","floor","CarouselComponent","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","slice","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","getMedia","mediaContainer","format","alt","mainMedia","resolveMedia","src","resolveAbsoluteUrl","altText","srcset","resolveSrcSet","_sortedFormats","keys","mediaFormats","sort","a","width","_reversedFormats","sortedFormats","media","resolveFormat","resolveBestFormat","reversedFormats","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","MediaComponent","mediaService","isInitialized","isLoading","isMissing","container","handleMissing","loadHandler","errorHandler","MediaModule","MediaModule_1","CarouselModule","RouterModule","UrlModule","FormErrorsComponent","_control","control","errors$","statusChanges","startWith","errors","invalid","dirty","touched","FormErrorsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","ItemCounterComponent","min","step","allowZero","readonly","input","sub","valueChanges","setValue","getValidCount","emitEvent","markAsDirty","decrement","max","ItemCounterModule","defaultPaginationConfig","pagination","addStart","addEnd","PaginationConfig","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","_","number","label","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","MediaConfig","ModalRef","NgbModalRef","ModalService","ngbModalService","modals","open","content","activeModal","getActiveModal","dismissActiveModal","dismiss","pop","closeActiveModal","NgbModal","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsConfig","QualtricsLoaderService","qsiLoaded$","fromEvent","qsi$","switchMap","isDataLoaded","api","qsi","qsiApi","initialize","run","reload","API","unload","log","addScript","scriptSource","hasScript","script","defer","source","querySelector","QualtricsComponent","qualtricsLoader","qualtrics","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","deps","StarRatingComponent","disabled","change","initialRate","setRate","rating","force","saveRate","setRateOnEvent","StarRatingModule","ViewConfig","ViewConfigModule","ViewConfigModule_1","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","params","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","UserOrderService","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","cart","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entryNumber","CheckoutService","ActiveCartService","CustomFormValidators","emailValidator","email","match","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","password","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","controls","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","CmsComponentsService","missingComponents","determineMappings","componentTypes","getMapping","componentConfig","disableSSR","getDeferLoadingStrategy","getChildRoutes","routes","componentTypes_1","componentTypes_1_1","childRoutes","getGuards","Set","componentTypes_2","componentTypes_2_1","guard","getI18nKeys","i18nKeys","componentTypes_3","componentTypes_3_1","CmsConfig","CmsInjectorService","cmsComponentsService","getCmsData","uid","parentInjector","CmsService","getComponentData","getInjector","configProviders","useValue","parent","ComponentHandler","ComponentHandlerService","handlers","invalidMappings","resolve","componentMapping","handler","getLauncher","viewContainerRef","elementInjector","launcher","ComponentWrapperDirective","dynamicAttributeService","componentHandler","cmsInjector","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","addDynamicAttributes","DynamicAttributeService","DefaultComponentHandler","subscriber","factory","getComponentFactory","CxApiService","auth","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","CheckoutDeliveryService","CheckoutPaymentService","PageMetaService","FeatureConfigService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","WebComponentHandler","platform","loadedWebComponents","webElement","disposeFunc","initWebComponent","then","elementName","cmsComponentData","cxApi","parentElement","Promise","path","isPlatformBrowser","onload","chainedOnload_1","LazyComponentHandler","defaultHandler","isNotClass","signature","substr","replace","PageComponentModule","AsmEnablerService","isEnabled","addUi","isLaunched","isUsedBefore","localStorage","setItem","getItem","ASM","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","asmEnablerService","CheckoutStepType","DeliveryModePreferences","AsmComponentService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","isCustomerEmulationSessionInProgress","mergeMap","userToken","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","asmService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","isCollapsed$","getAsmUiState","uiState","collapsed","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","AsmService","encapsulation","ViewEncapsulation","None","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","seconds","Pipe","name","AsmToggleUiComponent","isCollapsed","toggleUi","updateAsmUiState","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","csAgentLoginForm","Validators","required","onSubmit","valid","markAllAsTouched","FormBuilder","CustomerEmulationComponent","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","onDocumentClick","resultList","contains","closeResults","(document:click)","defaultAsmLayoutConfig","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","AddedToCartDialogComponent","modalService","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","centered","componentInstance","cart$","loaded$","isStable","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getActiveCartId","getCustomerCoupons","activeCardId","customerCoupons","cartId","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","updateable","removeEntry","getControl","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","selectiveCartEnabled","cartLoaded$","getLoaded","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","getLoading","slots","selectiveCart","loadingCart","exclude","arr","arg","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","cmsService","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","CartComponentModule","CartModule","SkipLinkScrollPosition","CheckoutConfig","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","OCC_USER_ID_ANONYMOUS","guid","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","showSameAsShippingAddressCheckbox$","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","catch","verifyAddress","countrySelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","shouldRedirect","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","selectedMethod$","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","cards$","methods","method","translate","month","payment","expiryTranslation","paymentMethods","selectedMethod","textUseThisPayment","textDefaultPaymentMethod","textSelected","defaultPaymentMethod","paymentMethod","createCard","textExpires","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","field","cardLabels","selected","title","img","actions","header","goNext","goPrevious","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","setAsDefaultField","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","regionSelected","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","card","getCardContent","addAddress","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","SkipLinkConfig","SkipLinkService","keyboardFocusService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","splice","getSkipLinkIndexInArray","i18nKey","scrollToTarget","hasTabindex","removeAttribute","previous","this_1","SkipLinkComponent","skipLinkService","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","PageSlotComponent","isPageFold","isPending","hasComponents","position$","slot$","getContentSlot","isDistinct","components$","slot","pendingComponentCount","class","lastPosition","pending","addSmartEditSlotClass","isLoaded","loadState","getComponentDeferOptions","old","slotData","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageLayoutModule","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","JSON","stringify","_key","SecurityContext","HTML","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsGuardsService","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","Error","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","routingConfig","getNextPageContext","shouldReload","getLoadStrategy","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","y","typeCode","select","tabNum","history","activeTab","getTitleParams","tabComps","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","continue","amendOrderForm","forwardRoute","AmendOrderActionsModule","ValidateQuantityToCancel","values","cxNoSelectedItemToCancel","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","features","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","closest","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","pluck","criteria","getCriteriaFromRoute","model$","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","FacetGroupCollapsedState","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductDetailOutlets","ProductFacetService","routeState$","searchResult$","filterForPage","mapResults","facetList$","facets","activeFacets","CATEGORY_PAGE","currentQuery","filterBreadcrumbs","breadcrumb","hasBreadcrumb","facetCode","facetValueCode","FacetService","productFacetService","facetState","facetList","facet","getState","getStateSnapshot","toggledState","toggled","COLLAPSED","EXPANDED","maxVisible","topVisible","updateState","increaseVisibleValues","decreaseVisibleValues","topValueCount","hasState","property","getLinkParams","HttpUrlEncodingCodec","decodeValue","ActiveFacetsComponent","facetService","closeIcon","removeQuery","getFocusKey","f","facetValueName","Default","ActiveFacetsModule","FacetListComponent","closeList","dialogFocusConfig","_isDialog","expandFacetGroup","FacetComponent","expandIcon","collapseIcon","_facet","isMultiSelect","multiSelect","state$","toggleGroup","keyboardFocus","openLink","FacetModule","FacetListModule","ProductFacetNavigationComponent","CLOSE_DELAY","open$","isOpen$","observeOn","asapScheduler","hasTrigger","delayWhen","launched","isActive$","trigger","ProductFacetNavigationModule","ProductRefinementComponent","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","q","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","OccConfig","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","radius","parseParameters","googleMaps","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderConfig","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","routeState","prefilledEmail","loginForm","_e","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","titleSelected","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","mediaConfig","mobile","tablet","desktop","widescreen","cartIcon","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","AnonymousConsentsModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\n\nexport interface LaunchConfig {\n  [key: string]: LaunchOptions;\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Dialog type is used to apply CSS classes\n   */\n  dialogType?: DIALOG_TYPE;\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n  ANONYMOUS_CONSENT = 'ANONYMOUS_CONSENT',\n}\n","import { Injectable } from '@angular/core';\nimport { Config, DeferLoadingStrategy } from '@spartacus/core';\nimport { LaunchConfig } from '../launch-dialog/index';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n\n  launch?: LaunchConfig;\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Renderer2,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Applicable, Priority } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  DIALOG_TYPE,\n  LaunchDialog,\n  LaunchOptions,\n  LAUNCH_CALLER,\n} from '../config';\n\nexport abstract class LaunchRenderStrategy implements Applicable {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER | string;\n    element?: any;\n    component?: ComponentRef<any>;\n  }> = [];\n\n  /**\n   * Classes to apply to the component when the dialog is a DIALOG\n   */\n  protected dialogClasses = ['d-block', 'fade', 'modal', 'show'];\n  /**\n   * Classes to apply to the component when the dialog is a POPOVER\n   */\n  protected popoverClasses = ['cx-dialog-popover'];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_END\n   */\n  protected sidebarEndClasses = ['cx-sidebar-end'];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_START\n   */\n  protected sidebarStartClasses = ['cx-sidebar-start'];\n\n  protected renderer: Renderer2;\n\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>>;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract hasMatch(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(\n    caller: LAUNCH_CALLER | string,\n    config: LaunchDialog\n  ): boolean {\n    return (\n      Boolean(config.component) &&\n      (this.renderedCallers.some((el) => el.caller === caller)\n        ? !!config.multi\n        : true)\n    );\n  }\n\n  protected applyClasses(\n    component: ComponentRef<any>,\n    dialogType: DIALOG_TYPE\n  ): void {\n    let classes = [];\n\n    // TODO: make classes configurable\n    switch (dialogType) {\n      case DIALOG_TYPE.DIALOG:\n        classes = this.dialogClasses;\n        this.renderer.addClass(this.document.body, 'modal-open');\n        break;\n      case DIALOG_TYPE.POPOVER:\n        classes = this.popoverClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_END:\n        classes = this.sidebarEndClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_START:\n        classes = this.sidebarStartClasses;\n        break;\n    }\n\n    for (const newClass of classes) {\n      this.renderer.addClass(component.location.nativeElement, newClass);\n    }\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER | string, config: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller !== caller\n    );\n\n    if ((config as LaunchDialog)?.dialogType === DIALOG_TYPE.DIALOG) {\n      this.renderer.removeClass(this.document.body, 'modal-open');\n    }\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER | string,\n    vcr: ViewContainerRef\n  ): Observable<ComponentRef<any>> {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n\n      const component = vcr.createComponent(template);\n\n      if (config?.dialogType) {\n        this.applyClasses(component, config?.dialogType);\n      }\n\n      this.renderedCallers.push({ caller, element: vcr.element, component });\n\n      return of(component);\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  hasMatch(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import {\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { resolveApplicable } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { LayoutConfig } from '../../config/layout-config';\nimport { LaunchOptions, LAUNCH_CALLER } from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  private _dialogClose = new BehaviorSubject<string>(undefined);\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected layoutConfig: LayoutConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>> {\n    const config = this.findConfiguration(caller);\n    if (config) {\n      const renderer = this.getStrategy(config);\n\n      // Render if the strategy exists\n      if (renderer) {\n        this._dialogClose.next(undefined);\n        return renderer.render(config, caller, vcr);\n      }\n    } else if (isDevMode()) {\n      console.warn('No configuration provided for caller ' + caller);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER | string): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  get dialogClose(): Observable<string> {\n    return this._dialogClose.asObservable();\n  }\n\n  closeDialog(reason: string) {\n    this._dialogClose.next(reason);\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER | string): LaunchOptions {\n    if (this.layoutConfig?.launch) {\n      return this.layoutConfig.launch[caller];\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return resolveApplicable(this.renderStrategies, [config]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n  FILTER = 'FILTER',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    switch (position) {\n      case OutletPosition.BEFORE:\n        this.removeValueOrAll(this.templatesRefsBefore, outlet, value);\n        break;\n      case OutletPosition.AFTER:\n        this.removeValueOrAll(this.templatesRefsAfter, outlet, value);\n        break;\n      default:\n        this.removeValueOrAll(this.templatesRefs, outlet, value);\n    }\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n      existing = existing.filter((val) => val === value);\n      store.set(outlet, existing);\n    }\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new BehaviorSubject(new Map<string, OutletDirective>());\n\n  /**\n   * Dynamically render the templates in the specified array\n   *\n   * @param outlet\n   */\n  render(outlet: string): void {\n    if (this.outletRefs.value.size !== 0) {\n      this.outletRefs.value.get(outlet).render();\n    }\n  }\n\n  /**\n   * Register outlet to be available to render dynamically\n   *\n   * @param cxOutlet\n   * @param context\n   */\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.next(this.outletRefs.value.set(cxOutlet, context));\n  }\n  /**\n   * Returns map of outlets\n   *\n   */\n  getOutletRef(outlet: string): Observable<OutletDirective> {\n    return this.outletRefs.asObservable().pipe(\n      map((val) => val.get(outlet)),\n      filter((val) => Boolean(val))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options: IntersectionOptions = {}\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin, threshold: options.threshold };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n  public renderedComponents = new Map<\n    OutletPosition,\n    Array<ComponentRef<any> | EmbeddedViewRef<any>>\n  >();\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.renderedComponents.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n      this.outletRendererService.register(this.cxOutlet, this);\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    const components = [];\n    templates.forEach((obj) => {\n      const component = this.create(obj);\n      components.push(component);\n    });\n\n    this.renderedComponents.set(position, components);\n  }\n\n  private create(tmplOrFactory: any): ComponentRef<any> | EmbeddedViewRef<any> {\n    this.renderedTemplate.push(tmplOrFactory);\n\n    if (tmplOrFactory instanceof ComponentFactory) {\n      const component = this.vcr.createComponent(tmplOrFactory);\n      return component;\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n      return view;\n    }\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent nodes of the given element.\n   *\n   * We avoid traversing the parent _elements_, as this is blocking\n   * ie11 implementations. One of the spare exclusions we make to not\n   * supporting ie11.\n   *\n   * @param element\n   */\n  private getHostElement(element: Node): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentNode);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  RendererFactory2,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER | string\n  ): Observable<ComponentRef<any>> {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n      this.renderedCallers.push({ caller });\n\n      return this.outletRendererService.getOutletRef(config.outlet).pipe(\n        map((outletDirective) => {\n          const components = outletDirective.renderedComponents.get(\n            config.position ? config.position : OutletPosition.BEFORE\n          ) as ComponentRef<any>[];\n\n          return components\n            .reverse()\n            .find(\n              (component) => component.componentType === template.componentType\n            );\n        }),\n        tap((component) => {\n          if (config?.dialogType) {\n            this.applyClasses(component, config?.dialogType);\n          }\n        })\n      );\n    }\n  }\n\n  hasMatch(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER | string, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n\n    super.remove(caller, config);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, RendererFactory2 } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected routingService: RoutingService\n  ) {\n    super(document, rendererFactory);\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER | string) {\n    this.routingService.go(config);\n  }\n\n  hasMatch(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { LayoutConfig } from '../config/layout-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [{ provide: LayoutConfig, useExisting: Config }],\n    };\n  }\n}\n","import { ElementRef, Injectable, ViewContainerRef } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport {\n  LaunchDialogService,\n  LAUNCH_CALLER,\n} from '../../layout/launch-dialog/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentLaunchDialogService {\n  constructor(protected launchDialogService: LaunchDialogService) {}\n\n  openDialog(\n    openElement?: ElementRef,\n    vcr?: ViewContainerRef\n  ): Observable<any> | undefined {\n    const component = this.launchDialogService.launch(\n      LAUNCH_CALLER.ANONYMOUS_CONSENT,\n      vcr\n    );\n\n    if (component) {\n      return combineLatest([\n        component,\n        this.launchDialogService.dialogClose,\n      ]).pipe(\n        filter(([, close]) => close && close !== undefined),\n        tap(([comp]) => {\n          openElement?.nativeElement.focus();\n          this.launchDialogService.clear(LAUNCH_CALLER.ANONYMOUS_CONSENT);\n          comp.destroy();\n        }),\n        map(([comp]) => comp)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** controls a polyfill class for the lacking focus-visible feature */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown') handleKeydown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = false;\n    }\n  }\n\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singlton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the mouse-focus class is added to the host element,\n   * indicating that the element focus was not caused by the keyboard.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n\n  // whenever the target autofocus element is selected by the `skipFocus` selector,\n  // autofocus is ignored.\n  skipFocus?: string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistence key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistence\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked') isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      // we wait a few milliseconds, mainly because firefox will otherwise apply\n      // the mouse event on the new focused child element\n      setTimeout(() => {\n        super.handleFocus(event as KeyboardEvent);\n      }, 100);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elements,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { Component, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService,\n    protected vcr: ViewContainerRef\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      null,\n      this.vcr\n    );\n    if (dialog) {\n      this.subscriptions.add(dialog.subscribe());\n    }\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n      FILTER: 'fas fa-filter',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [provideDefaultConfig(fontawesomeIconConfig)],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { FocusConfig } from '../../../layout/a11y/keyboard-focus/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  @HostBinding('attr.role') role = 'dialog';\n  @HostBinding('attr.aria-modal') modal = true;\n\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  focusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    autofocus: 'input[type=\"checkbox\"]',\n    focusOnEscape: true,\n  };\n\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    // Close on click outside the dialog window\n    if ((event.target as any).tagName === this.el.nativeElement.tagName) {\n      this.close('Cross click');\n    }\n  }\n\n  constructor(\n    protected config: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected el: ElementRef,\n    protected launchDialogService: LaunchDialogService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  close(reason?: any): void {\n    this.launchDialogService.closeDialog(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { DIALOG_TYPE } from '../../layout/launch-dialog/index';\nimport { AnonymousConsentDialogComponent } from '../../shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component';\n\nexport const defaultAnonymousConsentLayoutConfig: LayoutConfig = {\n  launch: {\n    ANONYMOUS_CONSENT: {\n      inline: true,\n      component: AnonymousConsentDialogComponent,\n      dialogType: DIALOG_TYPE.DIALOG,\n    },\n  },\n};\n","import {\n  Component,\n  ElementRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  @ViewChild('open') openElement: ElementRef;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService\n  ) {}\n\n  openDialog(): void {\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      this.openElement,\n      this.vcr\n    );\n    if (dialog) {\n      dialog.pipe(take(1)).subscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideConfig,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../layout/a11y/keyboard-focus/index';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { defaultAnonymousConsentLayoutConfig } from './default-anonymous-consent-layout.config';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideConfig(defaultAnonymousConsentLayoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/index';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsDialogModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Config, Image, OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { StorefrontConfig } from '../../../storefront-config';\nimport { MediaConfig } from './media.config';\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\n\n/**\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\n * that URLs and sizes are generated for the same media. This helps to improve performance\n * across difference devices and layouts.\n *\n * Media formats are optional, but highly recommended. The format will help the browser to\n * identify the right media for the right experience.\n *\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\n * `occConfig.backend.occ.baseUrl`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  /**\n   * The media formats sorted by size. The media format representing the smallest\n   * size is sorted on top.\n   */\n  private _sortedFormats: { code: string; size: MediaFormatSize }[];\n  private _reversedFormats: { code: string; size: MediaFormatSize }[];\n\n  constructor(\n    @Inject(Config) protected config: StorefrontConfig,\n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     */\n    protected breakpointService: BreakpointService\n  ) {}\n\n  /**\n   * Returns a `Media` object with the main media (`src`) and various media (`src`)\n   * for specific formats.\n   */\n  getMedia(\n    mediaContainer: MediaContainer | Image,\n    format?: string,\n    alt?: string\n  ): Media {\n    if (!mediaContainer) {\n      return;\n    }\n\n    const mainMedia: Image = mediaContainer.url\n      ? mediaContainer\n      : this.resolveMedia(mediaContainer as MediaContainer, format);\n\n    return {\n      src: this.resolveAbsoluteUrl(mainMedia?.url),\n      alt: alt || mainMedia?.altText,\n      srcset: this.resolveSrcSet(mediaContainer),\n    };\n  }\n\n  /**\n   * Creates the media formats in a logical sorted order. The map contains the\n   * format key and the format size information. We do this only once for performance\n   * benefits.\n   */\n  protected get sortedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._sortedFormats) {\n      this._sortedFormats = Object.keys(\n        (this.config as MediaConfig).mediaFormats\n      )\n        .map((key) => ({\n          code: key,\n          size: (this.config as MediaConfig).mediaFormats[key],\n        }))\n        .sort((a, b) => (a.size.width > b.size.width ? 1 : -1));\n    }\n    return this._sortedFormats;\n  }\n\n  /**\n   * Creates the media formats in a reversed sorted order.\n   */\n  protected get reversedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._reversedFormats) {\n      this._reversedFormats = this.sortedFormats.slice().reverse();\n    }\n    return this._reversedFormats;\n  }\n\n  /**\n   * Resolves the right media for the given format. The fo\n   */\n  protected resolveMedia(media: MediaContainer, format?: string): Image {\n    return media[this.resolveFormat(media, format)];\n  }\n\n  /**\n   * Validates the format against the given mediaContainer. If there is no format available,\n   * or if the mediaContainer doesn't contain a media for the given media, the most optimal\n   * format is resolved. If even that is not possible, the first format is returned.\n   */\n  protected resolveFormat(\n    mediaContainer: MediaContainer,\n    format?: string\n  ): string {\n    if (format && mediaContainer[format]) {\n      return format;\n    }\n    return (\n      this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]\n    );\n  }\n\n  /**\n   * Returns the media format code with the best size.\n   */\n  protected resolveBestFormat(media: MediaContainer | Image): string {\n    return this.reversedFormats.find((format) =>\n      media.hasOwnProperty(format.code)\n    )?.code;\n  }\n\n  /**\n   * Returns a set of media for the available media formats. Additionally, the congiured media\n   * format width is added to the srcset, so that browsers can select the appropriate media.\n   */\n  protected resolveSrcSet(media: MediaContainer | Image): string {\n    if (!media) {\n      return undefined;\n    }\n\n    const srcset = this.sortedFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.resolveAbsoluteUrl(media[format.code].url)} ${\n          format.size.width\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  /**\n   * Resolves the absolute URL for the given url. In most cases, this URL represents\n   * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\n   */\n  protected resolveAbsoluteUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  /**\n   * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\n   * `backend.occ.baseUrl`.\n   *\n   * The `backend.media.baseUrl` can be used to load media from a different location.\n   *\n   * In Commerce Cloud, a differnt location could mean a different \"aspect\".\n   */\n  protected getBaseUrl(): string {\n    return (\n      (this.config as OccConfig).backend.media.baseUrl ||\n      (this.config as OccConfig).backend.occ.baseUrl ||\n      ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media, MediaContainer } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: MediaContainer;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  protected create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media?.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  protected handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {\n  static forRoot(): ModuleWithProviders<MediaModule> {\n    return {\n      ngModule: MediaModule,\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functionality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent implements OnInit, OnDestroy {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive integer or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Indicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  /**\n   * Subscription responsible for auto-correcting control's value when it's invalid.\n   */\n  private sub: Subscription;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  ngOnInit() {\n    this.sub = this.control.valueChanges\n      .pipe(startWith(this.control.value))\n      .subscribe((value) =>\n        this.control.setValue(this.getValidCount(value), { emitEvent: false })\n      );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [provideDefaultConfig(defaultPaginationConfig)],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { MediaFormatSize } from './media.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Provides configuration specific to Media, such as images. This is used to optimize\n * rendering of the media, SEO and performance.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class MediaConfig {\n  /**\n   * Media _format_ configuration holds the size of the media's assigned to\n   * a format.\n   */\n  mediaFormats?: {\n    /**\n     * Represents the media format code, that is the key to distinguish different\n     * media in a container.\n     */\n    [format: string]: MediaFormatSize;\n  };\n}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Configuration options for the Qualtrics integration, which allows you to\n * specify the qualtrics project and deployment script.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class QualtricsConfig {\n  /**\n   * Holds the qualtrics integration options.\n   */\n  qualtrics?: {\n    /**\n     * Deployment script, loaded from a resource, to integrate the deployment of the qualtrics project.\n     * You would typically store the file in the local assets folder.\n     *\n     * Defaults to `assets/qualtricsIntegration.js`\n     */\n    scriptSource?: string;\n  };\n}\n","import {\n  Injectable,\n  isDevMode,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\n\nexport const QUALTRICS_EVENT_NAME = 'qsi_js_loaded';\n\n/**\n * Service to integration Qualtrics.\n *\n * The integration observes the Qualtrics API, and when available, it runs the QSI API\n * to let Qualtrics evaluate the application.\n *\n * The service supports an additional _hook_ (`isDataLoaded()`) that can be used to load application\n * data before pulling the QSI API. This is beneficial in a single page application when additional\n * data is required before the Qualtrics _creatives_ run.\n *\n * This service also supports the creation of the Qualtrics deployment script. This is optional, as\n * the script can be added in alternatives ways.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  /**\n   * Reference to the QSI API.\n   */\n  protected qsiApi: any;\n\n  /**\n   * QSI load event that happens when the QSI JS file is loaded.\n   */\n  private qsiLoaded$: Observable<any> = this.winRef?.nativeWindow\n    ? fromEvent(this.winRef.nativeWindow, QUALTRICS_EVENT_NAME)\n    : of();\n\n  /**\n   * Emits the Qualtrics Site Intercept (QSI) JavaScript API whenever available.\n   *\n   * The API is emitted when the JavaScript resource holding this API is fully loaded.\n   * The API is also stored locally in the service, in case it's required later on.\n   */\n  protected qsi$: Observable<any> = this.qsiLoaded$.pipe(\n    switchMap(() => this.isDataLoaded()),\n    map(() => this.winRef?.nativeWindow['QSI']),\n    filter((api) => Boolean(api)),\n    tap((qsi) => (this.qsiApi = qsi))\n  );\n\n  constructor(\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.initialize();\n  }\n\n  /**\n   * Starts observing the Qualtrics integration. The integration is based on a\n   * Qualtrics specific event (`qsi_js_loaded`). As soon as this events happens,\n   * we run the API.\n   */\n  protected initialize() {\n    this.qsi$.subscribe(() => this.run());\n  }\n\n  /**\n   * Evaluates the Qualtrics project code for the application.\n   *\n   * In order to reload the evaluation in Qualtrics, the API requires to unload the API before\n   * running it again. We don't do this by default, but offer a flag to conditionally unload the API.\n   */\n  protected run(reload = false): void {\n    if (!this.qsiApi?.API) {\n      if (isDevMode()) {\n        console.log('The QSI api is not available');\n      }\n      return;\n    }\n\n    if (reload) {\n      // Removes any currently displaying creatives\n      this.qsiApi.API.unload();\n    }\n\n    // Starts the intercept code evaluation right after loading the Site Intercept\n    // code for any defined intercepts or creatives\n    this.qsiApi.API.load().done(this.qsiApi.API.run());\n  }\n\n  /**\n   * Adds the deployment script to the DOM.\n   *\n   * The script will not be added twice if it was loaded before. In that case, we use\n   * the Qualtrics API directly to _unload_ and _run_ the project.\n   */\n  addScript(scriptSource: string): void {\n    if (this.hasScript(scriptSource)) {\n      this.run(true);\n    } else {\n      const script: HTMLScriptElement = this.renderer.createElement('script');\n      script.type = 'text/javascript';\n      script.defer = true;\n      script.src = scriptSource;\n      this.renderer.appendChild(this.winRef.document.body, script);\n    }\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data.\n   * You can observe any data in this method.\n   *\n   * Defaults to true.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n\n  /**\n   * Indicates if the script is already added to the DOM.\n   */\n  protected hasScript(source?: string): boolean {\n    return !!this.winRef.document.querySelector(`script[src=\"${source}\"]`);\n  }\n\n  protected get renderer(): Renderer2 {\n    return this.rendererFactory.createRenderer(null, null);\n  }\n}\n","import { Component, isDevMode } from '@angular/core';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n/**\n * Adds the Qualtrics deployment script whenever the component is loaded. The\n * deployment script is loaded from the global configuration (`qualtrics.scriptSource`).\n */\n@Component({\n  selector: 'cx-qualtrics',\n  template: ``,\n})\nexport class QualtricsComponent {\n  constructor(\n    protected qualtricsLoader: QualtricsLoaderService,\n    protected config: QualtricsConfig\n  ) {\n    if (this.config.qualtrics?.scriptSource) {\n      this.qualtricsLoader.addScript(this.config.qualtrics.scriptSource);\n    } else if (isDevMode()) {\n      console.warn(\n        `We're unable to add the Qualtrics deployment code as there is no script source defined in config.qualtrics.scriptSource.`\n      );\n    }\n  }\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => (ctx ? this.getInjectedService(ctx) : undefined)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data?.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  CmsComponentMapping,\n  CmsConfig,\n  DeferLoadingStrategy,\n} from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentsService {\n  private missingComponents: string[] = [];\n\n  constructor(\n    protected config: CmsConfig,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Should be called to make sure all component mappings are determined,\n   * especially lazy loaded ones.\n   *\n   * It's recommended way to make sure all other methods of CmsComponentService\n   * will be able to work synchronously for asked component types and avoid risk\n   * of potential errors that could be thrown otherwise.\n   */\n  determineMappings(componentTypes: string[]): Observable<string[]> {\n    return of(componentTypes);\n  }\n\n  /**\n   * Return collection of component mapping configuration for specified list of\n   * component types.\n   *\n   * If component mapping can't be determined synchronously, for example, lazy\n   * loaded one, it will throw an error.\n   *\n   * To make sure component mapping is available, determineMappings()\n   * should be called and completed first.\n   */\n  getMapping(componentType: string): CmsComponentMapping {\n    const componentConfig = this.config.cmsComponents?.[componentType];\n\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(componentType)) {\n        this.missingComponents.push(componentType);\n        console.warn(\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n\n    return componentConfig;\n  }\n\n  /**\n   * Checks, if component should be rendered as some components\n   * could be disabled for server side renderings\n   */\n  shouldRender(componentType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    return !(isSSR && this.getMapping(componentType)?.disableSSR);\n  }\n\n  /**\n   * Return DeferLoadingStrategy for component type.\n   */\n  getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    return this.config.cmsComponents?.[componentType]?.deferLoading;\n  }\n\n  /**\n   * Get cms driven child routes for components\n   */\n  getChildRoutes(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        routes.push(...(this.getMapping(componentType)?.childRoutes ?? []));\n      }\n    }\n    return routes;\n  }\n\n  /**\n   * Get cms driven guards for components\n   */\n  getGuards(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getMapping(componentType)?.guards?.forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  /**\n   * Get i18n keys associated with components\n   */\n  getI18nKeys(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        this.getMapping(componentType)?.i18nKeys?.forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CmsComponentData } from '../../model';\nimport { CmsComponent, CmsService } from '@spartacus/core';\nimport { CmsComponentsService } from '../../../services/cms-components.service';\n\n/**\n * Used to prepare injector for CMS components.\n *\n * Injector will take into account configured providers and provides CmsComponentData\n * for specified component's uid\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsInjectorService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  private getCmsData<T extends CmsComponent>(\n    uid: string,\n    parentInjector?: Injector\n  ): CmsComponentData<T> {\n    return {\n      uid: uid,\n      data$: (parentInjector ?? this.injector)\n        .get(CmsService)\n        .getComponentData<T>(uid),\n    };\n  }\n\n  public getInjector(\n    type: string,\n    uid: string,\n    parentInjector?: Injector\n  ): Injector {\n    const configProviders =\n      this.cmsComponentsService.getMapping(type)?.providers ?? [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsData(uid),\n        },\n        ...configProviders,\n      ],\n      parent: parentInjector ?? this.injector,\n    });\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Applicable, CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * ComponentHandler implementations can be used for instantiating and launching\n * different types of CMS mapped components\n */\nexport abstract class ComponentHandler implements Applicable {\n  /**\n   * Returns component resource - an observable stream used to launch and dispose\n   * component.\n   *\n   * Instantiate and launch component by subscribing to launcher.\n   * Successful component launch will be followed by emission of ElementRef\n   * (and in case of native Angular component, also ComponentRef).\n   * Unsubscribing from the launcher will remove and tear down the component.\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  abstract launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\n\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\n  abstract getPriority?(): Priority;\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  isDevMode,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from '../handlers/component-handler';\nimport { CmsComponentMapping, resolveApplicable } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Responsible for obtaining component handler for specified component mapping\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComponentHandlerService {\n  constructor(\n    @Optional()\n    @Inject(ComponentHandler)\n    protected handlers: ComponentHandler[]\n  ) {}\n\n  protected invalidMappings = new Set<CmsComponentMapping>();\n\n  /**\n   * Get best matching component handler\n   *\n   * @param componentMapping\n   */\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\n    const handler = resolveApplicable(this.handlers, [componentMapping]);\n\n    if (isDevMode() && !handler) {\n      if (!this.invalidMappings.has(componentMapping)) {\n        this.invalidMappings.add(componentMapping);\n        console.warn(\n          \"Can't resolve handler for component mapping: \",\n          componentMapping\n        );\n      }\n    }\n\n    return handler;\n  }\n\n  /**\n   * Get launcher for specified component mapping\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  getLauncher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return this.resolve(componentMapping)?.launcher(\n      componentMapping,\n      viewContainerRef,\n      elementInjector\n    );\n  }\n}\n","import {\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CmsComponentsService } from '../../services/cms-components.service';\nimport { CmsInjectorService } from './services/cms-injector.service';\nimport { ComponentHandlerService } from './services/component-handler.service';\n\n/**\n * Directive used to facilitate instantiation of CMS driven dynamic components\n */\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  /**\n   * @deprecated since 2.0\n   *\n   * This property in unsafe, i.e.\n   * - cmpRef can be set later because of lazy loading or deferred loading\n   * - cmpRef can be not set at all if for example, web components are used as cms components\n   */\n  cmpRef?: ComponentRef<any>;\n\n  private launcherResource?: Subscription;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected componentHandler: ComponentHandlerService,\n    protected cmsInjector: CmsInjectorService\n  ) {}\n\n  ngOnInit() {\n    this.cmsComponentsService\n      .determineMappings([this.cxComponentWrapper.flexType])\n      .subscribe(() => {\n        if (\n          this.cmsComponentsService.shouldRender(\n            this.cxComponentWrapper.flexType\n          )\n        ) {\n          this.launchComponent();\n        }\n      });\n  }\n\n  private launchComponent() {\n    const componentMapping = this.cmsComponentsService.getMapping(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (!componentMapping) {\n      return;\n    }\n\n    this.launcherResource = this.componentHandler\n      .getLauncher(\n        componentMapping,\n        this.vcr,\n        this.cmsInjector.getInjector(\n          this.cxComponentWrapper.flexType,\n          this.cxComponentWrapper.uid,\n          this.injector\n        )\n      )\n      ?.subscribe(({ elementRef, componentRef }) => {\n        this.cmpRef = componentRef;\n        this.decorate(elementRef);\n      });\n  }\n\n  private decorate(elementRef: ElementRef): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      elementRef.nativeElement,\n      this.renderer,\n      { componentData: this.cxComponentWrapper }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.launcherResource) {\n      this.launcherResource.unsubscribe();\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from './component-handler';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * Default component handler used for dynamically launching cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DefaultComponentHandler implements ComponentHandler {\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return typeof componentMapping.component === 'function';\n  }\n\n  getPriority(): Priority {\n    return Priority.FALLBACK;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return new Observable<{\n      elementRef: ElementRef;\n      componentRef?: ComponentRef<any>;\n    }>((subscriber) => {\n      let componentRef: ComponentRef<any>;\n\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const dispose = () => {\n        if (componentRef) {\n          componentRef.destroy();\n        }\n      };\n\n      const factory = this.getComponentFactory(\n        injector,\n        componentMapping.component\n      );\n\n      if (factory) {\n        componentRef = viewContainerRef.createComponent(\n          factory,\n          undefined,\n          injector\n        );\n        subscriber.next({ elementRef: componentRef.location, componentRef });\n      }\n\n      return dispose;\n    });\n  }\n\n  protected getComponentFactory(injector: Injector, component: any): any {\n    if (!component) {\n      return null;\n    }\n    const factory = injector\n      .get(ComponentFactoryResolver)\n      .resolveComponentFactory(component);\n\n    return factory;\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  BaseSiteService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  SelectiveCartService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: ActiveCartService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import {\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ComponentHandler } from './component-handler';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CxApiService } from '../services/cx-api.service';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n/**\n * Component handler responsible for launching cms web components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebComponentHandler implements ComponentHandler {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'string' &&\n      componentMapping.component.includes('#')\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef }> {\n    return new Observable<{ elementRef: ElementRef }>((subscriber) => {\n      let webElement;\n      let active = true;\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const renderer = injector.get(Renderer2);\n\n      const disposeFunc = () => {\n        active = false;\n        if (webElement) {\n          webElement.remove();\n        }\n      };\n\n      this.initWebComponent(componentMapping.component, renderer).then(\n        (elementName) => {\n          if (elementName) {\n            webElement = renderer.createElement(elementName);\n\n            const cmsComponentData = injector.get(CmsComponentData, null);\n\n            webElement.cxApi = {\n              ...injector.get(CxApiService),\n              cmsComponentData,\n            };\n\n            renderer.appendChild(\n              viewContainerRef.element.nativeElement.parentElement,\n              webElement\n            );\n\n            subscriber.next({ elementRef: new ElementRef(webElement) });\n\n            if (!active) {\n              disposeFunc();\n            }\n          }\n        }\n      );\n\n      return disposeFunc;\n    });\n  }\n\n  private initWebComponent(\n    component: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise((resolve) => {\n      const [path, selector] = component.split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { from, Observable } from 'rxjs';\nimport { DefaultComponentHandler } from './default-component.handler';\nimport { switchMap } from 'rxjs/operators';\nimport { ComponentHandler } from './component-handler';\n\n/**\n * Lazy component handler used for launching lazy loaded cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LazyComponentHandler implements ComponentHandler {\n  constructor(protected defaultHandler: DefaultComponentHandler) {}\n\n  /**\n   * We want to mach dynamic import signature () => import('')\n   */\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'function' &&\n      this.isNotClass(componentMapping.component)\n    );\n  }\n\n  private isNotClass(symbol: any): boolean {\n    const signature = symbol.toString().substr(0, 20).replace(' ', '');\n    return signature.startsWith('function()') || signature.startsWith('()=>');\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return from(componentMapping.component()).pipe(\n      switchMap((component) =>\n        this.defaultHandler.launcher(\n          { ...componentMapping, component },\n          viewContainerRef,\n          elementInjector\n        )\n      )\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\nimport { ComponentHandler } from './handlers/component-handler';\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\nimport { WebComponentHandler } from './handlers/web-component.handler';\nimport { LazyComponentHandler } from './handlers/lazy-component.handler';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: ComponentHandler,\n      useExisting: DefaultComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: LazyComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: WebComponentHandler,\n      multi: true,\n    },\n  ],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AsmService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n  isCollapsed$: Observable<boolean>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected asmService: AsmService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n    this.isCollapsed$ = this.asmService\n      .getAsmUiState()\n      .pipe(map((uiState) => uiState.collapsed));\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { AsmService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-asm-toggle-ui',\n  templateUrl: './asm-toggle-ui.component.html',\n  styleUrls: ['./asm-toggle-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmToggleUiComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  isCollapsed: boolean;\n\n  constructor(protected asmService: AsmService) {}\n\n  ngOnInit(): void {\n    this.subscription.add(\n      this.asmService.getAsmUiState().subscribe((uiState) => {\n        this.isCollapsed = uiState.collapsed;\n      })\n    );\n  }\n\n  toggleUi(): void {\n    this.asmService.updateAsmUiState({ collapsed: !this.isCollapsed });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\n\nexport const defaultAsmLayoutConfig: LayoutConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AsmModule as AsmCoreModule,\n  I18nModule,\n  provideConfig,\n} from '@spartacus/core';\nimport { FormErrorsModule } from '../../shared/index';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { AsmToggleUiComponent } from './asm-toggle-ui/asm-toggle-ui.component';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { defaultAsmLayoutConfig } from './default-asm-layout.config';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n    AsmToggleUiComponent,\n  ],\n  providers: [provideConfig(defaultAsmLayoutConfig)],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n\n    this.cart$ = combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.getActiveCartId(),\n      this.customerCouponService.getCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      ),\n    ]).pipe(\n      tap(\n        ([cart, activeCardId, customerCoupons]: [\n          Cart,\n          string,\n          CustomerCouponSearchResult\n        ]) => {\n          this.cartId = activeCardId;\n          this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n        }\n      ),\n      map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n    );\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { PromotionLocation, PromotionResult } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(protected promotionService: PromotionService) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n  selectiveCartEnabled: boolean;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    this.selectiveCartEnabled = this.selectiveCartService.isEnabled();\n\n    this.cartLoaded$ = combineLatest([\n      this.activeCartService.isStable(),\n      this.selectiveCartEnabled\n        ? this.selectiveCartService.getLoaded()\n        : of(false),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\n        loggedIn && this.selectiveCartEnabled\n          ? cartLoaded && sflLoaded\n          : cartLoaded\n      )\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, Cart, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.isEnabled()\n          ? this.selectiveCartService.getCart()\n          : of({} as Cart),\n        this.activeCartService.getLoading(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart, loadingCart]) => {\n          const exclude = (arr, args) =>\n            arr.filter((item) => args.every((arg) => arg !== item));\n          return Object.keys(cart).length === 0 && loadingCart\n            ? exclude(slots, [\n                'TopContent',\n                'CenterRightContentSlot',\n                'EmptyCartMiddleContent',\n              ])\n            : cart.totalItems\n            ? exclude(slots, ['EmptyCartMiddleContent'])\n            : selectiveCart.totalItems\n            ? exclude(slots, [\n                'EmptyCartMiddleContent',\n                'CenterRightContentSlot',\n              ])\n            : exclude(slots, ['TopContent', 'CenterRightContentSlot']);\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { SaveForLaterComponent } from './save-for-later.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  StateUtils,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setDeliveryAddressProcessState.success ||\n                      setDeliveryAddressProcessState.error) &&\n                    !setDeliveryAddressProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setDeliveryAddressProcessState.success) {\n                    return this.checkoutDetailsService.getDeliveryAddress();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setPaymentDetailsProcessState.success ||\n                      setPaymentDetailsProcessState.error) &&\n                    !setPaymentDetailsProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setPaymentDetailsProcessState.success) {\n                    return this.checkoutDetailsService.getPaymentDetails();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [\n          boolean,\n          DeliveryMode[],\n          StateUtils.LoaderState<void>,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  StateUtils,\n  UserAddressService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<StateUtils.LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  showSameAsShippingAddressCheckbox$: Observable<boolean>;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.showSameAsShippingAddressCheckbox$ = combineLatest([\n      this.countries$,\n      this.shippingAddress$,\n    ]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      }),\n      tap((shouldShowCheckbox) => {\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<{ content: Card; paymentMethod: PaymentDetails }[]>;\n  selectedMethod$: Observable<PaymentDetails>;\n  isGuestCheckout = false;\n  newPaymentFormManuallyOpened = false;\n\n  protected shouldRedirect: boolean;\n  protected deliveryAddress: Address;\n  protected checkoutStepUrlNext: string;\n  protected checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.shouldRedirect = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n\n    this.selectedMethod$ = this.checkoutPaymentService.getPaymentDetails().pipe(\n      tap((paymentInfo) => {\n        if (paymentInfo && !!Object.keys(paymentInfo).length) {\n          if (paymentInfo['hasError']) {\n            Object.keys(paymentInfo).forEach((key) => {\n              if (key.startsWith('InvalidField')) {\n                this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n              }\n            });\n            this.checkoutService.clearCheckoutStep(3);\n          } else if (this.shouldRedirect) {\n            this.routingService.go(this.checkoutStepUrlNext);\n          }\n        }\n      })\n    );\n\n    this.cards$ = combineLatest([\n      this.existingPaymentMethods$.pipe(\n        switchMap((methods) => {\n          return !methods?.length\n            ? of([])\n            : combineLatest(\n                methods.map((method) =>\n                  combineLatest([\n                    of(method),\n                    this.translation.translate('paymentCard.expires', {\n                      month: method.expiryMonth,\n                      year: method.expiryYear,\n                    }),\n                  ]).pipe(\n                    map(([payment, translation]) => ({\n                      payment,\n                      expiryTranslation: translation,\n                    }))\n                  )\n                )\n              );\n        })\n      ),\n      this.selectedMethod$,\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          paymentMethods,\n          selectedMethod,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          if (\n            paymentMethods.length &&\n            (!selectedMethod || Object.keys(selectedMethod).length === 0)\n          ) {\n            const defaultPaymentMethod = paymentMethods.find(\n              (paymentMethod) => paymentMethod.payment.defaultPayment\n            );\n            if (defaultPaymentMethod) {\n              selectedMethod = defaultPaymentMethod.payment;\n              this.checkoutPaymentService.setPaymentDetails(selectedMethod);\n            }\n          }\n          return paymentMethods.map((payment) => ({\n            content: this.createCard(\n              payment.payment,\n              {\n                textExpires: payment.expiryTranslation,\n                textUseThisPayment,\n                textDefaultPaymentMethod,\n                textSelected,\n              },\n              selectedMethod\n            ),\n            paymentMethod: payment.payment,\n          }));\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.checkoutPaymentService.setPaymentDetails(paymentDetails);\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n    this.checkoutPaymentService.createPaymentDetails(details);\n    this.shouldRedirect = true;\n  }\n\n  ngOnDestroy(): void {\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(field: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(\n    paymentDetails: PaymentDetails,\n    cardLabels: {\n      textDefaultPaymentMethod: string;\n      textExpires: string;\n      textUseThisPayment: string;\n      textSelected: string;\n    },\n    selected: PaymentDetails\n  ): Card {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        selected?.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport { FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  ErrorModel,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField = true;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries: Country[]) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles: Title[]) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions: Region[]) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(\n              (error: ErrorModel) => error.subject === 'titleCode'\n            )\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take, filter } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    this.selectedAddress$\n      .pipe(\n        filter((selected) => !!selected?.shippingAddress),\n        take(1)\n      )\n      .subscribe(() => this.goNext());\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus/services/keyboard-focus.service';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot()],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\nimport { CmsComponentsService } from '../../services/cms-components.service';\n\n/**\n * The `PageSlotComponent` is used to render the CMS page slot and it's components.\n *\n * The Page slot host element will be supplemented with css classes so that the layout\n * can be fully controlled by customers:\n * - The page slot _position_ is added as a css class by default.\n * - The `cx-pending` is added for as long as the slot hasn't start loading.\n * - The `page-fold` style class is added for the page slot which is configured as the page fold.\n */\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position represents the unique key for a page slot on a single page, but can\n   * be reused cross pages.\n   *\n   * The position is used to find the CMS components for the page slot. It is also\n   * added as an additional CSS class so that layoutt can be applied.\n   */\n  @Input() set position(value: string) {\n    this.position$.next(value);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  /**\n   * Maintains css classes introduced by the host and adds additional classes.\n   */\n  @Input() @HostBinding() class: string;\n\n  /**\n   * Indicates that the page slot is the last page slot above the fold.\n   */\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  /**\n   * Indicates that the components of the page slot haven't been loaded as long\n   * as the isPending state is true.\n   */\n  @HostBinding('class.cx-pending') isPending = true;\n\n  /**\n   * Indicates that the page slot doesn't contain any components. This is no\n   * longer used in spartacus, but kept for backwards compatibility.\n   */\n  @HostBinding('class.has-components') @Input() hasComponents = false;\n\n  protected position$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  components: ContentSlotComponentData[];\n\n  protected slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    distinctUntilChanged(this.isDistinct)\n  );\n\n  /** Observes the components for the given page slot. */\n  components$: Observable<ContentSlotComponentData[]> = this.slot$.pipe(\n    map((slot) => slot?.components ?? [])\n  );\n\n  protected subscription: Subscription = new Subscription();\n\n  /** Keeps track of the pending components that must be loaded for the page slot */\n  private pendingComponentCount = 0;\n\n  /** Tracks the last used position, in case the page slot is used dynamically */\n  private lastPosition: string;\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected elementRef: ElementRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.slot$.pipe(tap((slot) => this.decorate(slot))).subscribe((value) => {\n        this.components = value?.components || [];\n        this.cd.markForCheck();\n      })\n    );\n  }\n\n  protected decorate(slot: ContentSlotData): void {\n    let cls = this.class || '';\n\n    if (this.lastPosition && cls.indexOf(this.lastPosition) > -1) {\n      cls = cls.replace(this.lastPosition, '');\n    }\n    if (this.position$.value) {\n      cls += ` ${this.position$.value}`;\n      this.lastPosition = this.position$.value;\n    }\n\n    // host bindings\n    this.pending = slot?.components?.length || 0;\n    this.hasComponents = slot?.components?.length > 0;\n    if (cls && cls !== this.class) {\n      this.class = cls;\n    }\n\n    this.addSmartEditSlotClass(slot);\n  }\n\n  /**\n   * Sets the pending count for the page slot components. Once all pending components are\n   * loaded, the `isPending` flag is updated, so that the associated class can be updated\n   */\n  protected set pending(count: number) {\n    this.pendingComponentCount = count;\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  protected get pending(): number {\n    return this.pendingComponentCount;\n  }\n\n  /*\n   * Is triggered when a component is added to the view. This is used to\n   * update the pending count\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pending--;\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether the component should be\n   * rendered instantly or whether it should be deferred.\n   */\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.cmsComponentsService.getDeferLoadingStrategy(\n      componentType\n    );\n    return { deferLoading };\n  }\n\n  protected isDistinct(old: ContentSlotData, current: ContentSlotData) {\n    return (\n      current.components &&\n      old.components?.length === current.components.length &&\n      !old.components.find(\n        (el, index) => el.uid !== current.components[index].uid\n      )\n    );\n  }\n\n  private addSmartEditSlotClass(slot: ContentSlotData): void {\n    if (slot) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        this.elementRef.nativeElement,\n        this.renderer,\n        { slotData: slot }\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsDialogModule } from '../../shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsDialogModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsComponentsService.getGuards(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected translation: TranslationService,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsComponentsService.getI18nKeys(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsComponentsService } from './cms-components.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(\n    private router: Router,\n    private cmsComponentsService: CmsComponentsService\n  ) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const componentRoutes = this.cmsComponentsService.getChildRoutes(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\nimport { CmsComponentsService } from '../services';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    protected cmsService: CmsService,\n    protected cmsRoutes: CmsRoutesService,\n    protected cmsI18n: CmsI18nService,\n    protected cmsGuards: CmsGuardsService,\n    protected cmsComponentsService: CmsComponentsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsComponentsService.determineMappings(componentTypes)\n      ),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  ProtectedRoutesGuard,\n  RouteLoadStrategy,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    protected routingConfig: RoutingConfigService\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService.getPage(pageContext, this.shouldReload()).pipe(\n                  first(),\n                  switchMap((pageData) =>\n                    pageData\n                      ? this.service.canActivatePage(\n                          pageContext,\n                          pageData,\n                          route,\n                          state\n                        )\n                      : this.service.canActivateNotFoundPage(\n                          pageContext,\n                          route,\n                          state\n                        )\n                  )\n                )\n              )\n            )\n          : of(false)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReload(): boolean {\n    return this.routingConfig.getLoadStrategy() !== RouteLoadStrategy.ONCE;\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap } from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    protected cmsService: CmsService,\n    protected winRef: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilChanged((x, y) => x?.components === y?.components),\n    switchMap((data) =>\n      combineLatest(\n        (data?.components ?? '').split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab) {\n                return undefined;\n              }\n\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    this.activeTabNum =\n      this.winRef.nativeWindow.history?.state?.activeTab ?? this.activeTabNum;\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() amendOrderForm: FormGroup;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n\n  constructor(protected routingService: RoutingService) {}\n\n  continue(event: Event): void {\n    if (this.amendOrderForm.valid) {\n      this.routingService.go({\n        cxRoute: this.forwardRoute,\n        params: { code: this.orderCode },\n      });\n    } else {\n      this.amendOrderForm.markAllAsTouched();\n      event.stopPropagation();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantityToCancel(control: FormControl) {\n  if (!control.value) {\n    return null;\n  }\n  const quantity = Object.values(control.value).reduce(\n    (acc: number, val: number) => acc + val,\n    0\n  );\n  return quantity > 0 ? null : { cxNoSelectedItemToCancel: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup(\n      {},\n      { validators: [ValidateQuantityToCancel] }\n    );\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  ItemCounterModule,\n  MediaModule,\n} from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup) {\n    if (form.valid) {\n      this.orderAmendService.save();\n    } else {\n      form.markAllAsTouched();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order?.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\nimport { FormErrorsModule } from '../../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return data\n          ? {\n              title: data.name,\n              children: [nav],\n            }\n          : undefined;\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (event.type === 'keydown') {\n      event.preventDefault();\n    }\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    const wrapper = <HTMLElement>node.querySelector('.wrapper');\n    const body = <HTMLElement>node.closest('body');\n    if (wrapper) {\n      this.renderer.removeStyle(wrapper, 'margin-left');\n      if (\n        wrapper.offsetLeft + wrapper.offsetWidth >\n        body.offsetLeft + body.offsetWidth\n      ) {\n        this.renderer.setStyle(\n          wrapper,\n          'margin-left',\n          `${node.offsetWidth - wrapper.offsetWidth}px`\n        );\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c?.displayProducts === 'true' || c?.displayProducts === true,\n            displayProductImages:\n              <any>c?.displayProductImages === 'true' ||\n              c?.displayProductImages === true,\n            displaySuggestions:\n              <any>c?.displaySuggestions === 'true' ||\n              c?.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d?.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data?.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) => {\n      this.mainMediaContainer.next(p.images?.PRIMARY ? p.images.PRIMARY : {});\n    })\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach((key) => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import { Breadcrumb, Facet } from '@spartacus/core';\n\n/**\n * UI model that holds the full list of facet and active facets for\n * the product list.\n */\nexport interface FacetList {\n  facets: Facet[];\n  activeFacets?: Breadcrumb[];\n}\n\nexport interface FacetCollapseState {\n  /**\n   * Indicates whether the facet is toggled to expand or collapse the facet values.\n   * Whether the toggle results in an expanded or collapsed state, depends on the\n   * experience, which is controlled in CSS.\n   */\n  toggled?: FacetGroupCollapsedState;\n\n  /**\n   * The top number of facet values that will be visible.\n   */\n  topVisible?: number;\n\n  /**\n   * The max number of facet values which will be visible. This includes\n   * the top visible number.\n   */\n  maxVisible?: number;\n}\n\nexport enum FacetGroupCollapsedState {\n  EXPANDED = 'EXPANDED',\n  COLLAPSED = 'COLLAPSED',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  Breadcrumb,\n  PageType,\n  ProductSearchPage,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, pluck, switchMap } from 'rxjs/operators';\nimport { ProductListComponentService } from '../../container/product-list-component.service';\nimport { FacetList } from '../facet.model';\n\n/**\n * Provides access to all the facets and active facets for the Product Listing Page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductFacetService {\n  protected readonly routeState$ = this.routing\n    .getRouterState()\n    .pipe(pluck('state'));\n\n  protected readonly searchResult$: Observable<\n    ProductSearchPage\n  > = this.routeState$.pipe(\n    switchMap((state) =>\n      this.productListComponentService.model$.pipe(\n        filter((page) => this.filterForPage(state, page)),\n        map((page) => this.mapResults(state, page))\n      )\n    )\n  );\n\n  constructor(\n    protected routing: RoutingService,\n    protected productListComponentService: ProductListComponentService\n  ) {}\n\n  /**\n   * Observes the facets and active facets for the given page. The facet data\n   * is provided in a `FacetList`.\n   */\n  readonly facetList$: Observable<FacetList> = this.searchResult$.pipe(\n    map(\n      (result: ProductSearchPage) =>\n        ({\n          facets: result.facets,\n          activeFacets: result.breadcrumbs,\n        } as FacetList)\n    )\n  );\n\n  /**\n   * Filters the current result by verifying if the result is related to the page.\n   * This is done to avoid a combination of the next page and the current search results.\n   */\n  protected filterForPage(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): boolean {\n    if (state.context.type === PageType.CATEGORY_PAGE) {\n      return (\n        page.currentQuery?.query?.value?.indexOf(\n          `allCategories:${state.context.id}`\n        ) > -1\n      );\n    }\n\n    if (\n      state.context.type === PageType.CONTENT_PAGE &&\n      state.context.id === 'search'\n    ) {\n      return page.currentQuery.query.value.startsWith(`${state.params.query}:`);\n    }\n    return false;\n  }\n\n  private mapResults(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): ProductSearchPage {\n    return {\n      ...page,\n      breadcrumbs: this.filterBreadcrumbs(page.breadcrumbs, state.params),\n    };\n  }\n\n  /**\n   * filter breadcrumbs which are not actively selected\n   * but coming from the route navigation\n   */\n  private filterBreadcrumbs(\n    breadcrumbs: Breadcrumb[],\n    params: Params\n  ): Breadcrumb[] {\n    return breadcrumbs\n      ? breadcrumbs.filter(\n          (breadcrumb) => !this.hasBreadcrumb(breadcrumb, params)\n        )\n      : [];\n  }\n\n  /**\n   * Indicates whether the breadcrumb is related to navigation parameters,\n   * since either the category or brand code should match those codes.\n   */\n  private hasBreadcrumb(breadcrumb: Breadcrumb, params: Params): boolean {\n    return (\n      breadcrumb.facetCode === 'allCategories' &&\n      breadcrumb.facetValueCode === params.categoryCode\n    );\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport {\n  FacetCollapseState,\n  FacetGroupCollapsedState,\n  FacetList,\n} from '../facet.model';\nimport { ProductFacetService } from './product-facet.service';\n\n/**\n * Provides access to the facets as well as their UI state. The UI state\n * represents user related changes on the facets, such as expanding or\n * collapsing a facet group or expanding the number of _visible_ facet values.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FacetService {\n  /**\n   * An internal map where we keep the UI state of the facets.\n   */\n  protected facetState = new Map<string, BehaviorSubject<FacetCollapseState>>();\n\n  constructor(protected productFacetService: ProductFacetService) {}\n\n  /**\n   * Observes the facets for the given page and configures the initial UI state.\n   *\n   * Facets are configured on each emission so that we keep the facet UI state.\n   * This is mainly done to keep the state during usage of the facet, but also\n   * benefitial when the facets are rebuild while using them.\n   */\n  facetList$: Observable<FacetList> = this.productFacetService.facetList$.pipe(\n    tap((facetList) => {\n      facetList.facets.forEach((facet) => this.initialize(facet));\n    })\n  );\n\n  /**\n   * Returns the observed UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  getState(facet: Facet): Observable<FacetCollapseState> {\n    this.initialize(facet);\n    return this.facetState.get(facet.name);\n  }\n\n  /**\n   * Returns the UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  protected getStateSnapshot(facet: Facet): FacetCollapseState {\n    return (this.getState(facet) as BehaviorSubject<FacetCollapseState>).value;\n  }\n\n  /**\n   * Toggles the facet expanded state. If the expanded state becomes false,\n   * the visible values will decrease to the top values only.\n   *\n   * If the optional value argument is provided the expanded state will be set\n   * to this value, regardless of the current `expanded` state.\n   */\n  toggle(facet: Facet, isExpanded: boolean): void {\n    const state = this.getStateSnapshot(facet);\n\n    const toggledState = {\n      toggled: isExpanded\n        ? FacetGroupCollapsedState.COLLAPSED\n        : FacetGroupCollapsedState.EXPANDED,\n    } as FacetCollapseState;\n\n    if (toggledState.toggled === FacetGroupCollapsedState.COLLAPSED) {\n      toggledState.maxVisible = state.topVisible;\n    }\n\n    this.updateState(facet, toggledState);\n  }\n\n  /**\n   * Increases the visible values to the maximum values of the facet.\n   */\n  increaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.values.length });\n  }\n\n  /**\n   * Decreases the visible values to the topValueCount.\n   *\n   * The topValueCount defaults to 6, but can be controlled in\n   * the backend as well.\n   */\n  decreaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.topValueCount });\n  }\n\n  /**\n   * Persists the facet state and initializes the default values for the top\n   * and max visible values.\n   */\n  protected initialize(facet: Facet): void {\n    if (!this.hasState(facet)) {\n      this.facetState.set(\n        facet.name,\n        new BehaviorSubject({\n          topVisible: facet.topValueCount || 0,\n          maxVisible: facet.topValueCount || 0,\n        } as FacetCollapseState)\n      );\n    }\n  }\n\n  /**\n   * Updates the state of the facet in the local facet map.\n   */\n  protected updateState(facet: Facet, property: FacetCollapseState): void {\n    const state = { ...this.getStateSnapshot(facet), ...property };\n    this.facetState.get(facet.name).next(state);\n  }\n\n  protected hasState(facet: Facet): boolean {\n    return this.facetState.has(facet.name);\n  }\n\n  getLinkParams(query: string): { [key: string]: string } {\n    return {\n      // to avoid encoding issues with facets that have space (' ') in their name,\n      // we replace the decoded '+' back to empty space ' '.\n      // For more, see https://github.com/SAP/spartacus/issues/7348\n      query: new HttpUrlEncodingCodec().decodeValue(query).replace(/\\+/g, ' '),\n    };\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Breadcrumb } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FacetList } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n/**\n * Active facets render the applied facet values as a list of focusable buttons\n * which can be used to remove the applied facet value.\n */\n@Component({\n  selector: 'cx-active-facets',\n  templateUrl: './active-facets.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ActiveFacetsComponent {\n  /** Active facets which are applied to the product results. */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  /** Configurable icon which is used for the active facet close button */\n  @Input() closeIcon = ICON_TYPE.CLOSE;\n\n  constructor(protected facetService: FacetService) {}\n\n  getLinkParams(facet: Breadcrumb) {\n    return this.facetService.getLinkParams(facet.removeQuery?.query?.value);\n  }\n\n  /**\n   * The focus key is used to persist the focus on the facet when the DOM is being\n   * recreated. We only apply the focus key for the given _active_ facet when there\n   * the original facets is not available. This happens for non multi-valued facets.\n   *\n   * With this approach, the we keep the focus, either at the facet list or on the\n   * active facets.\n   */\n  getFocusKey(facetList: FacetList, facet: Breadcrumb) {\n    return facetList.facets?.find((f) =>\n      f.values?.find((val) => val.name === facet.facetValueName)\n    )\n      ? ''\n      : facet.facetValueName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ActiveFacetsComponent } from './active-facets.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [ActiveFacetsComponent],\n  exports: [ActiveFacetsComponent],\n})\nexport class ActiveFacetsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FocusConfig } from '../../../../../layout/a11y/keyboard-focus/index';\nimport { ICON_TYPE } from '../../../../misc/icon/icon.model';\nimport { FacetGroupCollapsedState, FacetList } from '../facet.model';\nimport { FacetComponent } from '../facet/facet.component';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet-list',\n  templateUrl: './facet-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetListComponent {\n  private _isDialog: boolean;\n  /**\n   * Indicates that the facet navigation is rendered in dialog.\n   */\n  @Input()\n  set isDialog(value: boolean) {\n    this._isDialog = value;\n    if (value) {\n      this.renderer.addClass(document.body, 'modal-open');\n    }\n  }\n\n  get isDialog(): boolean {\n    return this._isDialog;\n  }\n\n  /** Emits when the list must close */\n  @Output() closeList = new EventEmitter();\n\n  /** The list of all facet and values related to the products in the list */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  iconTypes = ICON_TYPE;\n\n  dialogFocusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    focusOnEscape: true,\n    autofocus: 'cx-facet',\n  };\n\n  @HostListener('click') handleClick() {\n    this.close();\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef,\n    protected renderer: Renderer2\n  ) {}\n\n  /**\n   * Toggles the facet group in case it is not expanded.\n   */\n  expandFacetGroup(facet: Facet, ref: FacetComponent) {\n    if (!ref.isExpanded) {\n      this.facetService.toggle(facet, ref.isExpanded);\n    }\n  }\n\n  /**\n   * Indicates that the facet group has been expanded.\n   */\n  isExpanded(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.EXPANDED)\n      );\n  }\n\n  /**\n   * Indicates that the facet group has been collapsed.\n   */\n  isCollapsed(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.COLLAPSED)\n      );\n  }\n\n  close(event?: boolean): void {\n    this.renderer.removeClass(document.body, 'modal-open');\n    this.closeList.emit(event);\n  }\n\n  block(event?: MouseEvent) {\n    event.stopPropagation();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport { Facet, FacetValue } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';\nimport { FacetCollapseState } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet',\n  templateUrl: './facet.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetComponent {\n  protected _facet: Facet;\n\n  state$: Observable<FacetCollapseState>;\n\n  /** configurable icon that is used to collapse the facet group  */\n  @Input() expandIcon: ICON_TYPE = ICON_TYPE.EXPAND;\n  @Input() collapseIcon: ICON_TYPE = ICON_TYPE.COLLAPSE;\n\n  @HostBinding('class.multi-select') isMultiSelect: boolean;\n\n  @ViewChildren('facetValue') values: QueryList<ElementRef<HTMLElement>>;\n\n  @ViewChild(FocusDirective) keyboardFocus: FocusDirective;\n\n  @Input()\n  set facet(value: Facet) {\n    this._facet = value;\n    this.isMultiSelect = !!value.multiSelect;\n    this.state$ = this.facetService.getState(value);\n  }\n\n  get facet(): Facet {\n    return this._facet;\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  /**\n   * Handles clicking the heading of the facet group, which means toggling\n   * the visibility of the group (collapse / expand) and optionally focusing\n   * the group.\n   */\n  toggleGroup(event: UIEvent) {\n    const host: HTMLElement = this.elementRef.nativeElement;\n    const isLocked = this.keyboardFocus?.isLocked;\n\n    this.facetService.toggle(this.facet, this.isExpanded);\n\n    if (!isLocked || this.isExpanded) {\n      host.focus();\n      // we stop propagating the event as otherwise the focus on the host will trigger\n      // an unlock event from the LockFocus directive.\n      event.stopPropagation();\n    }\n  }\n\n  get isExpanded(): boolean {\n    return this.values.first.nativeElement.offsetParent !== null;\n  }\n\n  openLink(event: KeyboardEvent) {\n    (event.target as HTMLElement).click();\n    event.preventDefault();\n  }\n\n  /**\n   * Increases the number of visible values for the facet. This is delegated\n   * to `facetService.increaseVisibleValues`.\n   */\n  increaseVisibleValues(): void {\n    this.facetService.increaseVisibleValues(this.facet);\n  }\n\n  /**\n   * Decreases the number of visible values for the facet. This is delegated\n   * to `facetService.decreaseVisibleValues`.\n   */\n  decreaseVisibleValues(): void {\n    this.facetService.decreaseVisibleValues(this.facet);\n  }\n\n  getLinkParams(value: FacetValue) {\n    return this.facetService.getLinkParams(value.query?.query.value);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/index';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { FacetComponent } from './facet.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetComponent],\n  exports: [FacetComponent],\n})\nexport class FacetModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { FacetModule } from '../facet/facet.module';\nimport { FacetListComponent } from './facet-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    FacetModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetListComponent],\n  exports: [FacetListComponent],\n})\nexport class FacetListModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { asapScheduler, BehaviorSubject, interval, Observable, of } from 'rxjs';\nimport { delayWhen, observeOn, switchMap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent {\n  iconTypes = ICON_TYPE;\n\n  /**\n   * We delay the removal of DOM so that animations can finish playing before the\n   * DOM is removed. Removing the DOM, as hidding is not enough to stop elements\n   * to be focused.\n   */\n  protected CLOSE_DELAY = 300;\n\n  /**\n   * Used to open the facet navigation in a dialog. The usage of the dialog depends\n   * on the availability of the trigger element, which is driven by CSS.\n   *\n   * The reference is also used to refocus the trigger after the dialog is closed.\n   */\n  @ViewChild('trigger') trigger: ElementRef<HTMLElement>;\n\n  protected open$ = new BehaviorSubject(false);\n\n  /**\n   * Emits the open state that indicates whether the facet list should be rendered.\n   * This is either done instantly, or after the user triggers this by using the trigger\n   * button. This driven by the visiibility of the trigger, so that the CSS drives\n   * the behaviour. This can differ per breakpoint.\n   *\n   * There's a configurable delay for the closed state, so that the DOM is not removed\n   * before some CSS animations are done.\n   */\n  isOpen$: Observable<boolean> = this.breakpointService.breakpoint$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure that the `hasTrigger`\n    // method represents the actual UI state.\n    observeOn(asapScheduler),\n    switchMap(() => (this.hasTrigger ? this.open$ : of(true))),\n    delayWhen((launched) => interval(launched ? 0 : this.CLOSE_DELAY))\n  );\n\n  /**\n   * Emits the active state that indicates whether the facet list is activated. Activation\n   * is related to the css, so that a animation or transition can visualize opening/closing\n   * the list (i.e. dialog).\n   */\n  isActive$ = this.open$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure the active class is\n    //  applied after the DOM is created\n    observeOn(asapScheduler)\n  );\n\n  constructor(protected breakpointService: BreakpointService) {}\n\n  launch() {\n    this.open$.next(true);\n  }\n\n  close() {\n    this.open$.next(false);\n    this.trigger.nativeElement.focus();\n  }\n\n  /**\n   * Indicates that the facet navigation should be open explicitely by a trigger.\n   * This is fully controlled by CSS, where the trigger button can be hidden\n   * (display:none) for certain screen sizes.\n   */\n  get hasTrigger() {\n    return this.trigger.nativeElement.offsetParent !== null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { ActiveFacetsModule } from './active-facets/active-facets.module';\nimport { FacetListModule } from './facet-list/facet-list.module';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    FacetListModule,\n    ActiveFacetsModule,\n    IconModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductFacetNavigationComponent],\n  exports: [ProductFacetNavigationComponent],\n})\nexport class ProductFacetNavigationModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n  StoreFinderConfig,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n  radius: number;\n  searchQuery: StoreFinderSearchQuery;\n  geolocation: GeoPoint;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    protected config: StoreFinderConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.radius = this.config.googleMaps.radius;\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected redirect(): void {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    this.routing.go({ cxRoute });\n  }\n\n  /**\n   * Log user out.\n   *\n   * This is delegated to the `AuthService`.\n   */\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyCouponsModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductFacetNavigationModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductFacetNavigationModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { MediaConfig } from '../../shared/components/media/media.config';\n\nexport const mediaConfig: MediaConfig = {\n  mediaFormats: {\n    mobile: {\n      width: 400,\n    },\n    tablet: {\n      width: 770,\n    },\n    desktop: {\n      width: 1140,\n    },\n    widescreen: {\n      width: 1400,\n    },\n    // product media\n    cartIcon: {\n      width: 65,\n    },\n    thumbnail: {\n      width: 96,\n    },\n    product: {\n      width: 284,\n    },\n    zoom: {\n      width: 515,\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { MediaModule } from '../shared/components/media/media.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n    MediaModule.forRoot(),\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig, mediaConfig } from './config/index';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfig(mediaConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}