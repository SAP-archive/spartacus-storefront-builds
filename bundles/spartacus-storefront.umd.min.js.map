{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","Injectable","args","providedIn","NgbModal","CurrentProductService","routingService","productService","getProduct","_this","getRouterState","pipe","map","state","params","filter","Boolean","switchMap","productCode","get","RoutingService","ProductService","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","staticStyleClasses","undefined","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","AddedToCartDialogComponent","modalService","cartService","fb","iconTypes","ICON_TYPE","quantity","form","group","ngOnInit","entry$","tap","entry","code","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","dismissModal","removeEntry","item","updateEntry","_a","updatedQuantity","entryNumber","CartService","FormBuilder","ViewChild","static","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","increment","cartEntry$","getEntry","subscription","subscribe","stock","stockLevelStatus","stockLevel","maxQuantity","markForCheck","updateCount","addToCart","openModal","addEntry","unsubscribe","modalInstance","modalRef","centered","size","componentInstance","cart$","getActive","loaded$","getLoaded","ngOnDestroy","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","AutoFocusDirective","hostElement","ngAfterViewInit","focus","Directive","AutoFocusDirectiveModule","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getSize","itemWidth","iif","nativeWindow","fromEvent","clientWidth","startWith","debounceTime","totalWidth","Math","round","distinctUntilChanged","of","CarouselComponent","el","service","minItemPixelSize","hideIndicators","indicatorIcon","previousIcon","nextIcon","activeSlide","_items","select","size$","slide","onOpen","groupIndex","itemIndex","items","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","breakpoint","breakpoints","window","target","event","getBreakpoint","innerWidth","windowWidth","getClosest","reverse","br","LayoutConfig","MediaService","breakpointService","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","altText","mediaFormats","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","preventDefault","stopPropagation","onBlur","onFocus","setFocus","registerOnTouched","fn","registerOnChange","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","OnlyNumberDirective","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","keyCode","String","fromCharCode","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","floor","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","tslib_1.__values","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","take","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","cmsComponents","CMSSiteContextComponent","component","useClass","deps","SiteContextModule","entryComponents","StarRatingComponent","change","initialRate","setRate","rating","force","style","saveRate","StarRatingModule","FormUtils","isNotValidField","formControlName","submitted","invalid","touched","dirty","PromotionsComponent","PromotionsModule","CartItemListComponent","isReadOnly","hasHeader","potentialProductPromotions","forEach","getPotentialProductPromotionsForItem","entryPromotions","_c","_d","promotion","description","consumedEntries","_e","_f","consumedEntry","isConsumedByEntry","consumendEntryNumber","orderEntryNumber","entries","_b","CartItemComponent","compact","view","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","cart","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","appliedProductPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","go","cxRoute","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","combineLatest","slots","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","CartComponentModule","CartModule","CheckoutConfigService","checkoutConfig","routingConfigService","steps","checkout","getCheckoutStep","currentStepType","getCheckoutStepIndex","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","routeName","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","snapshot","join","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","id","name","CheckoutStepType","CheckoutGuard","router","parseUrl","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","AuthGuard","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","cartId","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","ShippingAddressSetGuard","checkoutDetailsService","checkoutConfigService","checkoutStep","isDevMode","console","warn","deliveryAddress","keys","DeliveryModeComponent","mode","deliveryModeId","Validators","required","checkoutStepUrlNext","checkoutStepUrlPrevious","changedOption","supportedDeliveryModes$","getSupportedDeliveryModes","deliveryModeSub","getSelectedDeliveryMode","deliveryMode","currentDeliveryModeId","changeMode","setDeliveryMode","back","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","userAddressService","selectedCountry$","BehaviorSubject","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","UserAddressService","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","userPaymentService","months","years","sameAsShippingAddress","goBack","closeForm","setPaymentDetails","payment","defaultPayment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","add","MSG_TYPE_ERROR","openSuggestedAddress","year","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","address","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","UserPaymentService","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","loadPaymentMethods","existingPaymentMethods$","getPaymentMethods","getPaymentDetailsSub","paymentInfo","field","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","title","img","getCardIcon","actions","header","paymentMethodSelected","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","UserService","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","userService","showCancelBtn","submitAddress","backToAddress","defaultAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","AddressFormModule","ShippingAddressComponent","newAddressFormManuallyOpened","cards","selectedAddress$","goTo","getAddressesLoading","existingAddresses$","getAddresses","cards$","asObservable","addresses","textDefaultShippingAddress","textShipToThisAddress","loadAddresses","setAddressSub","setAddress","goNext","selectedAddressSub","addressSelected","addAddress","newAddress","createAndSetAddress","setDeliveryAddress","addNewAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","outlet","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","layoutModules","LayoutModule","OutletDirective","vcr","_context","nodes","renderTemplate","cxOutlet","ref","createEmbeddedView","$implicit","rootNodes","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","split","path","script","setAttribute","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","DOCUMENT","PLATFORM_ID","CxApiService","auth","cms","routing","currency","language","baseSite","productSearch","productReview","user","AuthService","CmsService","CurrencyService","LanguageService","BaseSiteService","ProductSearchService","ProductReviewService","ComponentWrapperDirective","componentMapper","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","getInjectorForComponent","detectChanges","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cxApi","getCmsDataForComponent","element","parentElement","P","reject","fulfilled","rejected","uid","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","removeChild","DynamicAttributeService","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","a","addComponentClass","addClass","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","breakpoint$","resolveSlots","getSlotConfig","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","layoutSlots","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","cls","currentClass","removeClass","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","useFactory","APP_INITIALIZER","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","PageMetaService","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","initSeoService","SeoModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenu","MainModule","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","authService","translationService","Subscription","userToken$","getUserToken","resetRemoveUserProcessState","getRemoveUserResultSuccess","success","onSuccess","getRemoveUserResultLoading","first","closeAccount","CloseAccountComponent","CloseAccountModule","ConsentManagementFormComponent","consentChanged","consentGiven","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","onConsentChange","given","ConsentManagementComponent","userConsentService","subscriptions","loading$","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","getConsents","templateList","consentsExists","loadConsents","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","withLatestFrom","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","giveConsent","version","withdrawConsent","UserConsentService","ConsentManagementModule","CustomFormValidators","emailDomainValidator","control","match","InvalidEmail","emailValidator","passwordValidator","InvalidPassword","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","UserOrderService","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","obj","wrapIntoObservable","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","componentRoutes","updateRouting","navigateByUrl","PageType","CONTENT_PAGE","newRoute","children","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","getNextPageContext","hasPage","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","hasNotFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","SemanticPathService","moduleComponents","OrderDetailsModule","forChild","ɵ0","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","sort","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","password","repassword","validator","matchPassword","token","queryParams","isPasswordReset","reset","resetPassword","ac","NotEqual","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","isNotValid","onSubmit","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","logout","UpdateEmailModule","UpdatePasswordFormComponent","submitClicked","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","breadcrumbs","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","itemSuperType","itemId","processChildren","rootUid","loadNavigationItems","node","child","addLinkToNode","createChildren","itemType","linkName","getLink","categoryCode","transform","childNode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","getDepth","depth","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","query","minCharactersBeforeRequest","displayProducts","pageSize","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","className","contains","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","SearchboxService","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","trim","Pipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","OrderConfirmationTotalsComponent","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","source","price","images","PRIMARY","ProductReferenceService","ProductCarouselComponent","items$","productCodes","codes","products$","ProductCarouselModule","ProductReferencesComponent","current","productCode$","productReferenceTypes","JSON","parse","displayProductTitles","ProductReferencesModule","ProductIntroComponent","reviewsTabAvailable","product$","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","click","h3Elements","h3Element","innerHTML","ProductIntroModule","Grid","List","ProductViewComponent","modeChange","viewMode","toLowerCase","newMode","ViewModes","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_CATEGORY","RELEVANCE_BRAND","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","navigate","queryParamsHandling","relativeTo","ProductListComponent","productListComponentService","viewMode$","setViewMode","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","Map","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","slice","ProductGridItemComponent","ProductListItemComponent","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ProductReviewsComponent","reviewService","isWritingReview","initialMaxListItems","reviews$","getByProductCode","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","review","headline","comment","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductImagesComponent","mainMediaContainer","thumbs$","createCarouselItems","mainImage$","getThumbs","getMain","openImage","thumbs","zoom","GALLERY","ProductImagesModule","LoginFormComponent","authRedirectService","userId","login","emailToLowerCase","authorize","access_token","redirect","AuthRedirectService","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","ɵ0$1","LogoutModule","RegisterComponent","userRegistrationForm","passwordconf","newsletter","termsandconditions","requiredTrue","globalMessageEntities","submit","userRegisterFormData","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$2","ɵ1","ProductDetailsPageModule","matcher","cmsRoute","addCmsRoute","ɵ0$3","CmsRouteModule","ɵ0$4","ɵ1$1","pageLabel","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","forgotPassword","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","brand","termsAndConditions","defaultRoutingConfig","RoutingModule","forRoot","ngModule","provideConfig","CoreRoutingModule","StorefrontFoundationModule","StateModule","AuthModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n\n  quantity = 0;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.hasStock = true;\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe(product => {\n          this.productCode = product.code;\n\n          if (\n            product.stock &&\n            product.stock.stockLevelStatus !== 'outOfStock' &&\n            product.stock.stockLevel > 0\n          ) {\n            this.maxQuantity = product.stock.stockLevel;\n            this.hasStock = true;\n          } else {\n            this.hasStock = false;\n          }\n\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, this.quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, iif, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items shown in the carousel is calculated dividing\n   * the host element width with the minimum item width.\n   */\n  getSize(nativeElement: HTMLElement, itemWidth: number): Observable<number> {\n    return iif(\n      () => Boolean(this.winRef.nativeWindow),\n      fromEvent(this.winRef.nativeWindow, 'resize').pipe(\n        map(_ => (nativeElement as HTMLElement).clientWidth),\n        startWith((nativeElement as HTMLElement).clientWidth),\n        debounceTime(100),\n        map(totalWidth => Math.round(totalWidth / itemWidth)),\n        distinctUntilChanged()\n      ),\n      of(3)\n    );\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselItem } from './carousel.model';\nimport { CarouselService } from './carousel.service';\n\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n})\nexport class CarouselComponent implements OnInit {\n  @Input() title: string;\n\n  private _items: CarouselItem[];\n  @Input('items')\n  set items(value: CarouselItem[]) {\n    this._items = value;\n    this.select();\n  }\n  get items(): CarouselItem[] {\n    return this._items;\n  }\n\n  /** Indicates the current active item in carousel (if any)  */\n  @Input() activeItem: number;\n\n  /**\n   * Specifies the min pixel used per product. This value is used\n   * to calculate the amount of items we can fit into the available with\n   * of the host element. The number of items is not related the breakpoints,\n   * which means that a carousel can be placed in different layouts,\n   * regardless of the overall size.\n   */\n  @Input() minItemPixelSize = 300;\n\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  @Output() open = new EventEmitter<CarouselItem>();\n\n  /**\n   * The group with items which is currently active.\n   */\n  activeSlide = 0;\n\n  /**\n   * The number of items that should be rendered in the carousel.\n   */\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    this.size$ = this.service\n      .getSize(this.el.nativeElement, this.minItemPixelSize)\n      .pipe(tap(() => this.select()));\n  }\n\n  select(slide = 0) {\n    this.activeSlide = slide;\n  }\n\n  onOpen(groupIndex: number, itemIndex: number): void {\n    this.select(groupIndex);\n    this.open.emit(this.items[groupIndex + itemIndex]);\n  }\n}\n","export enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges, OnDestroy {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.subscription = this.inputValue.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe(value => {\n        if (value) {\n          this.manualChange(Number(value));\n        }\n      });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    if (e.key) {\n      return e.key;\n    } else {\n      // for old browsers\n      if (e.keyCode && String.fromCharCode) {\n        switch (e.keyCode) {\n          case 8:\n            return 'Backspace';\n          case 9:\n            return 'Tab';\n          case 27:\n            return 'Escape';\n          case 37:\n            return 'ArrowLeft';\n          case 39:\n            return 'ArrowRight';\n          default:\n            return String.fromCharCode(e.keyCode);\n        }\n      }\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map(ctx => this.getInjectedService(ctx)),\n      filter(Boolean)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private el: ElementRef) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.el.nativeElement.style.setProperty(\n        '--star-fill',\n        value || this.initialRate\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { FormGroup } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Checks is the `formControlName` field valid in the provided `form`.\n   *\n   * If it's NOT valid, the method returns `true`.\n   *\n   * @param form a form whose field to check\n   * @param formControlName a field name\n   * @param submitted is the form submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    return (\n      form.get(formControlName).invalid &&\n      (submitted ||\n        (form.get(formControlName).touched && form.get(formControlName).dirty))\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  items: Item[] = [];\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumendEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumendEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumendEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): Cart[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getActive().pipe(\n      map(cart => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest(slots$, this.cartService.getActive()).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Cart, OrderEntry, CartService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  UrlModule,\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartTotalsComponent } from './cart-totals.component';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\n\n@NgModule({\n  imports: [NgbModule, CartDetailsModule, CartTotalsModule, CartSharedModule],\n  exports: [\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n  ],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useClass: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    steps: Array<CheckoutStep>;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { CheckoutConfig } from './config/checkout-config';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutStep, CheckoutStepType } from './model/checkout-step.model';\nimport { RoutingConfigService } from '@spartacus/core';\n\n@Injectable()\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute) {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  private getStepUrlFromActivatedRoute(activatedRoute: ActivatedRoute) {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string) {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutConfig } from './checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\n\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { Observable, of } from 'rxjs';\nimport { RoutingConfigService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.config.checkout.steps[0].routeName\n        ).paths[0]\n      )\n    );\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AuthGuard, CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [AuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutService,\n  PaymentDetails,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n  filter,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => cartData.code),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutConfigService } from '../checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.SHIPPING_ADDRESS\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  changedOption: boolean;\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.changedOption = false;\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        map((deliveryMode: DeliveryMode) =>\n          deliveryMode && deliveryMode.code ? deliveryMode.code : null\n        )\n      )\n      .subscribe(code => {\n        if (!!code && code === this.currentDeliveryModeId) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.changedOption = true;\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    if (this.changedOption) {\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    } else {\n      this.routingService.go(this.checkoutStepUrlNext);\n    }\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [AuthGuard, CartNotEmptyGuard, ShippingAddressSetGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutConfigService } from '../checkout-config.service';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.DELIVERY_MODE\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return !!countries.filter(\n          (country: Country): boolean =>\n            country.isocode === address.country.isocode\n        ).length;\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.globalMessageService.add(\n                {\n                  key: 'paymentMethods.invalidField',\n                  params: { field: paymentInfo[key] },\n                },\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          const card: Card = {\n            title: payment.defaultPayment ? textDefaultPaymentMethod : '',\n            textBold: payment.accountHolderName,\n            text: [payment.cardNumber, textExpires],\n            img: this.getCardIcon(payment.cardType.code),\n            actions: [{ name: textUseThisPayment, event: 'send' }],\n          };\n          if (this.selectedPayment && this.selectedPayment.id === payment.id) {\n            card.header = textSelected;\n          }\n          return card;\n        }\n      )\n    );\n  }\n\n  paymentMethodSelected(paymentDetails: PaymentDetails) {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  next(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { RoutingConfigService } from '@spartacus/core';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.PAYMENT_DETAILS\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Observable, Subscription, BehaviorSubject } from 'rxjs';\nimport { map, tap, switchMap } from 'rxjs/operators';\n\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    this.checkoutDeliveryService.verifyAddress(this.address.value);\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent],\n})\nexport class AddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../checkout-config.service';\nimport { CheckoutStepType } from '../../model/checkout-step.model';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  cards: Card[] = [];\n  isLoading$: Observable<boolean>;\n  selectedAddress: Address;\n  goTo: CheckoutStepType;\n  setAddress: Address;\n  setAddressSub: Subscription;\n  selectedAddressSub: Subscription;\n  selectedAddress$: BehaviorSubject<Address> = new BehaviorSubject<Address>(\n    null\n  );\n  cards$: Observable<CardWithAddress[]>;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$.asObservable(),\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    this.userAddressService.loadAddresses();\n\n    this.setAddressSub = this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .subscribe(address => {\n        this.setAddress = address;\n        this.selectedAddress$.next(address);\n        if (this.goTo) {\n          this.goNext();\n          this.goTo = null;\n        }\n      });\n    this.selectedAddressSub = this.selectedAddress$.subscribe(address => {\n      this.selectedAddress = address;\n    });\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n    const card: Card = {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n\n    this.cards.push(card);\n\n    return card;\n  }\n\n  addressSelected(address: Address): void {\n    this.selectedAddress$.next(address);\n  }\n\n  next(): void {\n    this.addAddress({ address: this.selectedAddress, newAddress: false });\n  }\n\n  addAddress({\n    newAddress,\n    address,\n  }: {\n    newAddress: boolean;\n    address: Address;\n  }): void {\n    if (newAddress) {\n      this.checkoutDeliveryService.createAndSetAddress(address);\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      return;\n    }\n    if (\n      this.setAddress &&\n      this.selectedAddress &&\n      this.setAddress.id === this.selectedAddress.id\n    ) {\n      this.goNext();\n    } else {\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      this.checkoutDeliveryService.setDeliveryAddress(address);\n    }\n  }\n\n  addNewAddress(address: Address): void {\n    this.addAddress({ address, newAddress: true });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goBack: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goBack) {\n      this.back();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n  // @todo: should we keep below provider here?\n  providers: [CheckoutConfigService],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = {};\n  private templatesRefsBefore = {};\n  private templatesRefsAfter = {};\n\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore[outlet] = template;\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs[outlet] = template;\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter[outlet] = template;\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore[outlet];\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter[outlet];\n        break;\n      default:\n        templateRef = this.templatesRefs[outlet];\n    }\n    return templateRef;\n    // return this.templatesRefs[outlet] ? this.templatesRefs[outlet] : null;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [...layoutModules],\n})\nexport class LayoutModule {}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: any;\n  @Input()\n  set cxOutletContext(value: any) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit(): void {\n    const nodes = [];\n    nodes.push(...this.renderTemplate(OutletPosition.BEFORE));\n    nodes.push(...this.renderTemplate(OutletPosition.REPLACE, true));\n    nodes.push(...this.renderTemplate(OutletPosition.AFTER));\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): any[] {\n    const nodes = [];\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template || replace) {\n      const ref = this.vcr.createEmbeddedView(template || this.templateRef, {\n        $implicit: this._context,\n      });\n      nodes.push(...ref.rootNodes);\n    }\n    return nodes;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  Injectable,\n  ComponentFactoryResolver,\n  Inject,\n  Renderer2,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        script = renderer.createElement('script');\n        this.loadedWebComponents[path] = script;\n        script.setAttribute('src', path);\n        renderer.appendChild(this.document.body, script);\n\n        if (isPlatformBrowser(this.platform)) {\n          script.onload = () => {\n            script.onload = null;\n          };\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, Optional } from '@angular/core';\nimport {\n  AuthService,\n  CmsService,\n  RoutingService,\n  CurrencyService,\n  LanguageService,\n  BaseSiteService,\n  ProductService,\n  ProductSearchService,\n  ProductReviewService,\n  UserService,\n  TranslationService,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  constructor(\n    @Optional() public auth: AuthService,\n    @Optional() public cms: CmsService,\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    // user\n    @Optional() public user: UserService,\n    // translation\n    @Optional() public translation: TranslationService\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private cd: ChangeDetectorRef,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      this.cd.detectChanges();\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: this.getCmsDataForComponent(),\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.renderer.removeChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      return config.slots;\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(Boolean));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { PWAModuleConfig } from '../pwa.module-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injectable } from '@angular/core';\nimport { Title, Meta, MetaDefinition } from '@angular/platform-browser';\nimport { PageMetaService, PageMeta, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { SeoMetaService } from './seo-meta.service';\nimport { htmlLangProvider } from './html-lang-provider';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport { Address, UserAddressService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(private userAddressService: UserAddressService) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Address, UserAddressService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(private userAddressService: UserAddressService) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ConsentTemplate } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  consentGiven = false;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consentTemplate && this.consentTemplate.currentConsent) {\n      if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n        this.consentGiven = false;\n      } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n        this.consentGiven = true;\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentChanged.emit({\n      given: !this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, skipWhile, tap, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n    ]).pipe(\n      map(\n        ([consentLoading, giveConsentLoading, withdrawConsentLoading]) =>\n          consentLoading || giveConsentLoading || withdrawConsentLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      tap(templateList => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      })\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(\n      // Email Standard RFC 5322:\n      /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ // tslint:disable-line\n    )\n      ? null\n      : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(\n      /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/\n    )\n      ? null\n      : { InvalidPassword: true };\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${\n              address.postalCode\n            }`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${\n              billingAddress.postalCode\n            }`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(pageContext: PageContext, routes: Route[]): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageContext.id.startsWith('/') &&\n      pageContext.id.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageContext.id.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: pageContext,\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\n\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  PageContext,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\n\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    private routingService: RoutingService,\n    private cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.hasPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([hasPage, pageContext]) =>\n        hasPage\n          ? this.resolveCmsPageLogic(pageContext, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageContext.id)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.hasPage(notFoundCmsPageContext).pipe(\n      switchMap(hasNotFoundPage => {\n        if (hasNotFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() => this.resolveCmsPageLogic(pageContext, route, state))\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n    }),\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest(\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home')\n    ).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(Boolean),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    node.title = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node.children = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n\n      node.url = this.getLink(item);\n\n      // if \"NEWWINDOW\", target is true\n      node.target = item.target;\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: UIEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  data$ = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n    GenericLinkModule,\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest(\n      this.getProductResults(config),\n      this.getProductSuggestions(config)\n    ).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a singe product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${\n            deliveryAddress.postalCode\n          }`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${\n            billingAddress.postalCode\n          }`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CarouselItem } from '../../../shared/components/carousel/carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<CarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<CarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map(refs =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): CarouselItem {\n    const item: CarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsProductCarouselComponent } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CarouselItem } from '../../../../shared/components/carousel/carousel.model';\nimport { ProductCarouselService } from '../product-carousel.service';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  title$: Observable<string> = this.component.data$.pipe(\n    map(data => data.title)\n  );\n\n  items$: Observable<CarouselItem[]> = this.component.data$.pipe(\n    filter(Boolean),\n    map(data => data.productCodes.split(' ')),\n    map(codes => codes.map(code => this.service.loadProduct(code))),\n    switchMap((products$: Observable<CarouselItem>[]) =>\n      combineLatest(products$)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductCarouselComponent>,\n    protected service: ProductCarouselService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsProductReferencesComponent } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\nimport { ProductCarouselService } from '../product-carousel.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  items$ = combineLatest([this.productCode$, this.component.data$]).pipe(\n    switchMap(([code, data]) =>\n      this.service.getProductReferences(\n        code,\n        data.productReferenceTypes,\n        Boolean(JSON.parse(data.displayProductTitles)),\n        Boolean(JSON.parse(data.displayProductPrices))\n      )\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected service: ProductCarouselService,\n    protected current: CurrentProductService\n  ) {}\n\n  get productCode$(): Observable<string> {\n    return this.current.getProduct().pipe(\n      filter(Boolean),\n      map(p => p.code)\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n  ActivatedRouterStateSnapshot,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_CATEGORY = ':relevance:category:';\n  protected readonly RELEVANCE_BRAND = ':relevance:brand:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest(\n    this.searchResults$,\n    this.searchByRouting$\n  ).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_CATEGORY + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_BRAND + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit {\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.productListComponentService.clearSearchResults();\n\n    this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n      this.viewMode$.next(\n        template === 'ProductGridPageTemplate' ? ViewModes.Grid : ViewModes.List\n      );\n    });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.productListComponentService.viewPage(pageNumber);\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(Boolean),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CarouselItem } from '../../../shared/components/carousel/index';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  private thumbs$: Observable<CarouselItem[]> = this.product$.pipe(\n    map(product => this.createCarouselItems(product))\n  );\n\n  private mainImage$ = combineLatest([\n    this.product$,\n    this.mainMediaContainer,\n  ]).pipe(map(([_, container]) => container));\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  getThumbs(): Observable<CarouselItem[]> {\n    return this.thumbs$;\n  }\n\n  getMain(): Observable<any> {\n    return this.mainImage$;\n  }\n\n  openImage(item: CarouselItem): void {\n    this.mainMediaContainer.next(item.media.container);\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: CarouselItem[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createCarouselItems(product: Product): CarouselItem[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return null;\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => {\n      return {\n        media: {\n          container: c,\n          format: 'thumbnail',\n        },\n      };\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n  }\n\n  login(): void {\n    const userId = this.emailToLowerCase();\n    this.auth.authorize(userId, this.form.controls.password.value);\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  /*\n   * Change the inputed email to lowercase because\n   * the backend only accepts lowercase emails\n   */\n  emailToLowerCase() {\n    return this.form.controls.userId.value.toLowerCase();\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n\n  private subscription = new Subscription();\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: [false],\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private auth: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n\n    this.subscription.add(\n      this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      })\n    );\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(data => Object.keys(data).length > 0))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          if (\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR].some(\n              message => message === 'This field is required.'\n            )\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n  }\n\n  submit(): void {\n    this.emailToLowerCase();\n    const {\n      firstName,\n      lastName,\n      email,\n      password,\n      titleCode,\n    } = this.userRegistrationForm.value;\n    const userRegisterFormData: UserSignUp = {\n      firstName,\n      lastName,\n      uid: email,\n      password,\n      titleCode,\n    };\n    this.userService.register(userRegisterFormData);\n  }\n\n  private matchPassword(ac: AbstractControl): { NotEqual: boolean } {\n    if (ac.get('password').value !== ac.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n  }\n\n  /*\n   * Change the inputed email to lowercase because\n   * the backend only accepts lowercase emails\n   */\n  emailToLowerCase(): void {\n    this.userRegistrationForm.value.email = this.userRegistrationForm.value.email.toLowerCase();\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { UserComponentModule } from './user/user.module';\n\n@NgModule({\n  imports: [\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    // TODO:#2811 - uncomment to enable\n    // StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    UserComponentModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  UrlSegment,\n  UrlMatchResult,\n  Route,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName [ / ** ]'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'TopHeaderSlot',\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'] },\n  logout: { paths: ['logout'] },\n  register: { paths: ['login/register'] },\n  forgotPassword: { paths: ['login/forgot-password'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    ConfigModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitely\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}