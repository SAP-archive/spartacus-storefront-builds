{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/launch-dialog/config/default-launch-config.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render-strategy.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render-strategy.service.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render-strategy.service.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/recipes/config/optional-layouts/plp-accessibility-layout-config.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ICON_TYPE","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","ar","error","__spread","concat","IconResourceType","SkipLinkScrollPosition","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","resources","type","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","config","find","res","types","includes","svgResource","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","IconConfig","DomSanitizer","Injectable","providedIn","IconComponent","iconLoader","elementRef","renderer","setIcon","addStyleClasses","_this","addClass","host","styleClasses","forEach","cls","removeClass","split","nativeElement","ElementRef","Renderer2","Input","Component","selector","template","IconModule","NgModule","declarations","imports","CommonModule","providers","provideDefaultConfig","provide","useExisting","Config","exports","ModalRef","_super","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","requiredConsents","isLevel13","isFeatureLevel","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","deferLoading","DeferLoadingStrategy","INSTANT","entryComponents","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","console","warn","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","path","script","setAttribute","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","args","DOCUMENT","PLATFORM_ID","CxApiService","auth","cart","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","Optional","ActiveCartService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","CmsService","PageMetaService","FeatureConfigService","GlobalMessageService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","RoutingService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","ComponentWrapperDirective","vcr","componentMapper","injector","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","undefined","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","get","element","parentElement","P","reject","fulfilled","rejected","result","then","uid","data$","getComponentData","configProviders","Injector","CmsComponentData","useValue","parent","addDynamicAttributes","properties","destroy","remove","ViewContainerRef","DynamicAttributeService","Directive","PageComponentModule","AsmComponentService","authService","asmAuthService","routingService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","of","unload","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","globalMessageService","disabled","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","switchMap","access_token","handleCustomerSessionStartRedirection","GlobalMessageType","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","HostBinding","encapsulation","ViewEncapsulation","None","BaseFocusService","BaseFocusDirective","service","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","indexOf","tagName","toLowerCase","hasAttribute","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","HostListener","BlockFocusDirective","block","PersistFocusService","focus","Map","group","set","clear","delete","getPersistenceGroup","getAttribute","PersistFocusDirective","handleFocus","event","preventDefault","stopPropagation","attr","ngAfterViewInit","isPersisted","preventScroll","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","from","querySelectorAll","findFirstFocusable","autofocus","el","isHidden","findFocusable","locked","invisible","suffix","map","join","filter","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","focusOnDoubleEscape","EscapeFocusDirective","esc","EventEmitter","emit","Output","AutoFocusService","hasPersistedFocus","getPersisted","focussed","AutoFocusDirective","shouldAutofocus","firstFocusable","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","active","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusService","hasFocusableChildren","moveFocus","focusable","getTrapStart","trap","getTrapEnd","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusService","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","handleClick","isLocked","lockFocus","addTabindexToChildren","shouldUnlockAfterAutofocus","setTimeout","toString","KeyboardFocusService","FocusDirective","directives","KeyboardFocusModule","DIALOG_TYPE","LAUNCH_CALLER","SkipLinkService","keyboardFocusService","skipLinks$","BehaviorSubject","getSkipLinks","found","skipLinks","skipLink","existing","splice","getSkipLinkIndexInArray","i18nKey","position","scrollToTarget","HTMLElement","hasTabindex","removeAttribute","previous","this_1","SkipLinkConfig","SkipLinkComponent","skipLinkService","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_LAUNCH_CONFIG","launch","ASM","outlet","SKIP_LINKS","LaunchRenderStrategy","renderedCallers","shouldRender","caller","some","multi","_config","LaunchDialogService","renderStrategies","launchConfig","findConfiguration","getStrategy","render","strategy","match","LaunchConfig","AsmEnablerService","launchDialogService","load","isEnabled","addUi","isLaunched","isUsedBefore","setItem","params","getItem","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","deps","asmEnablerService","BREAKPOINT","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","markForCheck","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","floor","seconds","slice","Pipe","name","FormUtils","isNotValidField","form","formControlName","submitted","control","invalid","touched","dirty","CSAgentLoginFormComponent","fb","submitClicked","csAgentTokenLoading","submitEvent","Validators","required","onSubmit","controls","isNotValid","FormBuilder","CustomerEmulationComponent","subscription","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","valueChanges","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","AsmService","ViewChild","(document:click)","AsmModule","ReactiveFormsModule","AsmCoreModule","forRoot","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","getRouterState","state","productCode","x","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","getActive","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","item","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","entry","consumedEntryNumber","orderEntryNumber","entries","entryNumber","AddedToCartDialogComponent","cartService","promotionService","quantity","modalIsOpen","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","startWith","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","code","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","isStable","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","CarouselComponent","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","PaginationItemType","PaginationNavigationPosition","LayoutConfig","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","getHighestAvailableFormat","mediaFormat_1","mediaFormats","altText","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","ItemCounterComponent","min","allowZero","readonly","input","markAsDirty","decrement","getControl","_control$","getValidCount","emitEvent","max","ItemCounterModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","defaultPaginationConfig","pagination","addStart","addEnd","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","number","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","BEFORE","AFTER","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationConfig","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","FormsModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","isQualtricsConfigured","initialize","setup","fromEvent","qualtricsScript","defer","idScript","qualtrics","projectId","qsi","isDataLoaded","dataLoaded","API","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","getInjectedService","data","nativeName","symbol","isocode","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","StarRatingComponent","change","initialRate","setRate","rating","force","saveRate","setRateOnEvent","StarRatingModule","ViewConfigModule","ngModule","ViewConfigModule_1","view","ViewConfig","CustomFormValidators","emailDomainValidator","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","DeliveryModePreferences","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","sort","a","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","isLevel","getCustomerCoupons","customerCoupons","cartId","OCC_USER_ID_ANONYMOUS","guid","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponCode","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","valid","addVoucher","markAsTouched","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","isSaveForLaterEnabled","every","consignmentEntry","orderEntry","updateable","removeEntry","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","getLoaded","isUserLoggedIn","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","slots","selectiveCart","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","features","CartComponentModule","CartModule","CheckoutStepType","CheckoutConfig","OutletPosition","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","keys","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","year","Date","getFullYear","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","msg","field","cardLabels","title","img","actions","header","goNext","goPrevious","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","templateOrFactory","REPLACE","store","stacked","templateRef","removeValueOrAll","newValue","has","val","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","outletService","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","InlineRenderStrategy","inline","OutletRefDirective","tpl","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","intersects","first","Observable","observer","rootMargin","getRootMargin","intersectionObserver","IntersectionObserver","observe","disconnect","flatMap","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletRendererService","outletRefs","register","cxOutlet","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","cxOutletDefer","build","changes","hostElement","getHostElement","buildOutlet","isArray","tmplOrFactory","ComponentFactory","createEmbeddedView","$implicit","cxOutletContext","OutletModule","OutletRenderStrategy","RoutingRenderStrategy","_caller","LaunchDialogModule","LaunchDialogModule_1","provideConfig","LayoutModule","PageSlotComponent","cdRef","isPending","hasComponents","isPageFold","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","PageSlotModule","PageLayoutService","handlers","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","rendererFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","ANONYMOUS_CONSENTS_FEATURE","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","SemanticPathService","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","termsAndConditions","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","ValidateQuantity","q","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","paymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","isPasswordReset","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","observeOn","asyncScheduler","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","querySelector","navBar","removeStyle","offsetWidth","setStyle","navs","childNodes","isTabbable","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","replace","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductDetailOutlets","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductFacetNavigationComponent","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","toggleFacet","getVisibleFacetValues","values","topValueCount","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","property","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductRefinementComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","markFormAsTouched","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","viewStore","prepareRouteUrl","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefilledEmail","_g","_f","_e","prefillForm","submitLogin","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","collectDataFromRegisterForm","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","export abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(fontawesomeIconConfig),\n    { provide: IconConfig, useExisting: Config },\n  ],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.config, '1.3');\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, FeaturesConfigModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise((resolve) => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  BaseSiteService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  SelectiveCartService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: ActiveCartService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** controls a polyfill class for the lacking focus-visible feature */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown') handleKeydown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = false;\n    }\n  }\n\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singlton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the mouse-focus class is added to the host element,\n   * indicating that the element focus was not caused by the keyboard.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n\n  // whenever the target autofocus element is selected by the `skipFocus` selector,\n  // autofocus is ignored.\n  skipFocus?: string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistance key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistance\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked')\n  isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      super.handleFocus(event as KeyboardEvent);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elmenents,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\n\nexport abstract class LaunchConfig {\n  launch?: {\n    [key: string]: LaunchOptions;\n  };\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Optional elements for other configurations\n   */\n  options?: {\n    /**\n     * Dialog type is used to apply CSS classes\n     */\n    dialogType?: DIALOG_TYPE;\n  };\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { AsmMainUiComponent } from '../../../cms-components/asm/asm-main-ui/asm-main-ui.component';\nimport { SkipLinkComponent } from '../../a11y/skip-link/component/skip-link.component';\nimport { LaunchConfig } from './launch-config';\n\nexport const DEFAULT_LAUNCH_CONFIG: LaunchConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n    SKIP_LINKS: {\n      outlet: 'cx-storefront',\n      component: SkipLinkComponent,\n    },\n  },\n};\n","import { ViewContainerRef } from '@angular/core';\nimport { LaunchDialog, LaunchOptions, LAUNCH_CALLER } from '../config';\n\nexport abstract class LaunchRenderStrategy {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER;\n    element?: any;\n  }> = [];\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ): void;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract match(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(caller: LAUNCH_CALLER, config: LaunchDialog): boolean {\n    return this.renderedCallers.some((el) => el.caller === caller)\n      ? !!config.multi\n      : true;\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER, _config?: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n  }\n}\n","import { Inject, Injectable, ViewContainerRef } from '@angular/core';\nimport {\n  LaunchConfig,\n  LaunchOptions,\n  LAUNCH_CALLER,\n} from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  // Keep a list of rendered elements\n  protected renderedCallers: LAUNCH_CALLER[] = [];\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected launchConfig: LaunchConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(caller: LAUNCH_CALLER, vcr?: ViewContainerRef): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.render(config, caller, vcr);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER): LaunchOptions {\n    return this.launchConfig?.launch[caller];\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return this.renderStrategies.find((strategy) => strategy.match(config));\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: [''],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.form.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.form.controls.searchTerm.setValue(this.selectedCustomer.name);\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else if (media && media[this.getHighestAvailableFormat(media)]) {\n      return this.getImageUrl(media[this.getHighestAvailableFormat(media)].url);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * returns highest resolution format name from media formats\n   */\n  private getHighestAvailableFormat(media): string {\n    if (media) {\n      let mediaFormat: MediaFormats;\n\n      this.mediaFormats.forEach((format) => {\n        if (\n          !mediaFormat ||\n          (mediaFormat.threshold < format.threshold && media[format.code])\n        ) {\n          mediaFormat = format;\n        }\n      });\n\n      return mediaFormat.code;\n    }\n\n    return null;\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap((value) =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\n\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig, PaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultPaginationConfig),\n    { provide: PaginationConfig, useExisting: Config },\n  ],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(() =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter((loaded) => loaded),\n      switchMap(() => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap((dataLoaded) => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: ` <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container> `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  FeatureConfigService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  form: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected featureConfig: FeatureConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n    if (this.featureConfig && this.featureConfig.isLevel('1.5')) {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n        this.customerCouponService.getCustomerCoupons(\n          this.MAX_CUSTOMER_COUPON_PAGE\n        ),\n      ]).pipe(\n        tap(\n          ([cart, userId, customerCoupons]: [\n            Cart,\n            string,\n            CustomerCouponSearchResult\n          ]) => {\n            this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code;\n            this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n          }\n        ),\n        map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n    else {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n      ]).pipe(\n        tap(\n          ([cart, userId]: [Cart, string]) =>\n            (this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n        ),\n        map(([cart]: [Cart, string]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.form = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.form.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (!this.form.valid) {\n      this.form.markAsTouched();\n      return;\n    }\n    this.cartVoucherService.addVoucher(this.form.value.couponCode, this.cartId);\n  }\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    FeaturesConfigModule,\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  FeatureConfigService,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n  FeatureConfigService,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    promotionService: PromotionService,\n    // tslint:disable-next-line:unified-signatures\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(promotionService: PromotionService);\n\n  constructor(\n    protected promotionService: PromotionService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  FeatureConfigService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private featureConfig: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    if (this.isSaveForLaterEnabled()) {\n      this.cartLoaded$ = combineLatest([\n        this.activeCartService.isStable(),\n        this.selectiveCartService.getLoaded(),\n        this.authService.isUserLoggedIn(),\n      ]).pipe(\n        tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n        map(([cartLoaded, sflLoaded, loggedIn]) =>\n          loggedIn ? cartLoaded && sflLoaded : cartLoaded\n        )\n      );\n    }\n    //TODO remove for #5958\n    else {\n      this.cartLoaded$ = this.activeCartService.isStable();\n    }\n    //TODO  remove for #5958 end\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958 end\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.getCart(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart]) => {\n          if (cart.totalItems) {\n            return slots.filter((slot) => slot !== 'EmptyCartMiddleContent');\n          } else if (selectiveCart.totalItems) {\n            return slots.filter(\n              (slot) =>\n                slot !== 'EmptyCartMiddleContent' &&\n                slot !== 'CenterRightContentSlot'\n            );\n          } else {\n            return slots.filter(\n              (slot) =>\n                slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  LoaderState,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<LoaderState<void>>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(\n          (paymentInfo) => paymentInfo && !!Object.keys(paymentInfo).length\n        )\n      )\n      .subscribe((paymentInfo) => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach((key) => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some((error) => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n        const obj = regions.find(\n          (region) =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    const selectedSub = this.selectedAddress$.subscribe((selected) => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    switch (position) {\n      case OutletPosition.BEFORE:\n        this.removeValueOrAll(this.templatesRefsBefore, outlet, value);\n        break;\n      case OutletPosition.AFTER:\n        this.removeValueOrAll(this.templatesRefsAfter, outlet, value);\n        break;\n      default:\n        this.removeValueOrAll(this.templatesRefs, outlet, value);\n    }\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n      existing = existing.filter((val) => val === value);\n      store.set(outlet, existing);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  Config,\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkConfig } from './config/skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    { provide: SkipLinkConfig, useExisting: Config },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import {\n  ComponentFactoryResolver,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected componentFactoryResolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER,\n    vcr: ViewContainerRef\n  ) {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      vcr.createComponent(template);\n      this.renderedCallers.push({ caller, element: vcr.element });\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  match(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned obervable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options?: IntersectionOptions) {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evalutes whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new Map<string, OutletDirective>();\n\n  render(outlet: string): void {\n    if (this.outletRefs.size !== 0) {\n      this.outletRefs.get(outlet).render();\n    }\n  }\n\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.set(cxOutlet, context);\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>,\n    // tslint:disable-next-line: unified-signatures\n    intersectionService: DeferLoaderService\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(vcr: ViewContainerRef, templateRef: TemplateRef<any>, outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>, intersectionService?: IntersectionService) instead\n   */\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>\n  );\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService?: DeferLoaderService,\n    private outletRendererService?: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n    this.outletRendererService.register(this.cxOutlet, this);\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach((obj) => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n    this.renderedTemplate.push(tmplOrFactory);\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super();\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ) {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n\n      const element = vcr?.element;\n      this.renderedCallers.push({ caller, element });\n    }\n  }\n\n  match(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected routingService: RoutingService) {\n    super();\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER) {\n    this.routingService.go(config);\n  }\n\n  match(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideConfig } from '@spartacus/core';\nimport { DEFAULT_LAUNCH_CONFIG } from './config/default-launch-config';\nimport { LaunchConfig } from './config/launch-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [\n        provideConfig(DEFAULT_LAUNCH_CONFIG),\n        { provide: LaunchConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot()],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position is used to find the CMS page slot (and optional outlet)\n   * that is rendered in the PageSlotComponent. Furthermore, the position\n   * is added as a CSS class name to the host element.\n   */\n  @Input()\n  set position(position: string) {\n    this.position$.next(position);\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   *\n   * @deprecated we'll stop supporting this property in 2.0 as\n   * it is not used separately.\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    tap((slot) => this.addSmartEditSlotClass(slot))\n  );\n\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map((slot) => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig,\n    protected cdRef?: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe((components) => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n    this.cdRef?.markForCheck();\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap((result) =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap((pageContext) =>\n        this.cmsService\n          .getPage(pageContext, true)\n          .pipe(first(), withLatestFrom(of(pageContext)))\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap((data) =>\n      combineLatest(\n        data.components.split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n    AddressBookComponentService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach((key) => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    if (this.isConfirmation) {\n      control.disable();\n    }\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => Boolean(order)),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home').pipe(observeOn(asyncScheduler)),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    event.preventDefault();\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map((n) => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n\n  isTabbable(node: any) {\n    return this.flyout && node.children && node.children.length;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      () =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   *\n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach((key) => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe((params) => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap((searchResult) => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach((el) => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map((searchResult) => {\n        return searchResult.facets\n          ? searchResult.facets.filter((facet) => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet: Facet): Facet[] {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : facet.topValueCount\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  private markFormAsTouched(): void {\n    Object.keys(this.reviewForm.controls).forEach((key) => {\n      this.reviewForm.controls[key].markAsTouched();\n    });\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.markFormAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/components/star-rating/star-rating.module';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { ActivatedRoute } from '@angular/router';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService, RoutingService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(\n    protected storeDataService: StoreDataService,\n    protected route: ActivatedRoute,\n    protected routingService: RoutingService\n  ) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.activeCartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n        if (this.activeCartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n\n    const prefilledEmail = this.winRef?.nativeWindow?.history?.state?.[\n      'newUid'\n    ];\n\n    if (prefilledEmail?.length) {\n      this.prefillForm('userId', prefilledEmail);\n    }\n  }\n\n  login(): void {\n    if (this.form.valid) {\n      this.submitLogin();\n    } else {\n      this.markFormAsTouched();\n    }\n  }\n\n  private submitLogin(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  private markFormAsTouched(): void {\n    Object.keys(this.form.controls).forEach((key) => {\n      this.form.controls[key].markAsTouched();\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n  ProtectedRoutesService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  /**\n   * @deprecated since 1.4\n   * Check #5666 for more info\n   *\n   * TODO(issue:5666) Deprecated since 1.4\n   */\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes?: ProtectedRoutesService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  protected redirect(): void {\n    // TODO(issue:5666) Deprecated since 1.4\n    const cxRoute: string =\n      this.featureConfig.isLevel('1.4') &&\n      this.protectedRoutes &&\n      this.protectedRoutes.shouldProtect\n        ? 'login'\n        : 'home';\n\n    this.routing.go({ cxRoute });\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.userRegistrationForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.userRegistrationForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n  MyCouponsModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","/**\n * @deprecated since 2.0.0\n * NOTE: delete this file altogether, move below slots to the main default layout config\n */\n\nimport { LayoutConfig } from '../../../layout/config/layout-config';\n\nexport const PLPAccessibilityLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n  },\n};\n"]}